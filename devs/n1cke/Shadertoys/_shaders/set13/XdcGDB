{"Shader":{"ver":"0.1","info":{"id":"XdcGDB","date":"1456964164","viewed":344,"name":"Demo Effect: Fire","username":"4rknova","description":"The classic fire effect","likes":6,"published":3,"flags":32,"tags":["fire","feedback"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2016\n\/\/ Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage(out vec4 c, vec2 p)\n{\n\tc = texture2D(iChannel0, p.xy \/ iResolution.xy);\n    c = 1. - cos(c*3.14159\/1.3); \/\/ Contrast\n\tc = vec4(min(c.x*1.7, 1.), pow(c.x, 2.6), pow(c.x, 10.), 1); \/\/ Palette\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2016\n\/\/ Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define QUALITY_HIGH\n\nfloat hash(vec2 p)\n{\n    return fract(sin(dot(p,vec2(127.1,311.7))) * 43758.5453123);\n}\n\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p), f = fract(p); \n\tf *= f*f*(3.-2.*f);\n    return mix(mix(hash(i + vec2(0.,0.)), \n                   hash(i + vec2(1.,0.)), f.x),\n               mix(hash(i + vec2(0.,1.)), \n                   hash(i + vec2(1.,1.)), f.x), f.y);\n}\n\nfloat fbm(in vec2 p)\n{\n\treturn\t.5000 * noise(p)\n\t\t   +.2500 * noise(p * 2.)\n\t\t   +.1250 * noise(p * 4.)\n\t\t   +.0625 * noise(p * 8.);\n}\n\n#define GRID_SIZE  75.\n#define COEF       0.186\n\nvoid mainImage(out vec4 c, in vec2 p)\n{\n    float f = 1. \/ GRID_SIZE;\n    vec2 ac = vec2(iResolution.x \/ iResolution.y, 1);\n    vec2 uv = (p \/ iResolution.xy * 2. - 1.) * ac;\n    vec2 iuv = floor(GRID_SIZE * uv);\n        \n    if (iuv.y < -GRID_SIZE + 1.) {\n        c = vec4(\n#ifdef QUALITY_HIGH\n            fbm\n#else\n            hash\n#endif\n            ((iuv * f + iGlobalTime)*3.), 0, 0, 1) - .1;\n        return;\n    } \n    \n    iuv = (uv \/ ac + 1.) *.5;\n        \n    float c0 = texture2D(iChannel0, iuv + vec2(.0,-f) \/ ac).x;\n    float c1 = texture2D(iChannel0, iuv + vec2( f,-f) \/ ac).x;\n    float c2 = texture2D(iChannel0, iuv + vec2( f,-f) \/ ac).x;\n    float c3 = texture2D(iChannel0, iuv + vec2( f,-f * 2.)  \/ ac).x;\n\tfloat c4 = texture2D(iChannel0, iuv + vec2(-f,-f * 2.)  \/ ac).x;\n    \n    c = vec4((c0+c1+c2+c3+c4) * COEF, 0, 0, 1);\n}","name":"Buf A","description":"","type":"buffer"}]}}