{"Shader":{"ver":"0.1","info":{"id":"MdKXDD","date":"1464607164","viewed":422,"name":"One Tweet Cellular Pattern","username":"Shane","description":"Emulating a Voronoi pattern in under a tweet.","likes":21,"published":3,"flags":0,"tags":["voronoi","code","cellular","minimal","golf","novelty"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/*\n\tOne Tweet Cellular Pattern\n\t--------------------------\n\n\tEmulating a Voronoi pattern in under a tweet. Thanks to\n\tCoyote, it's now resolution independent, and there's\n\tmovement. :)\n\n\tThe pattern is pretty convincing, all things considered.\n\tNote that there are no hash calls, no loops, etc.\n\n\tConceptually speaking, I think this is about as minimal\n\tas it gets... although it wouldn't surprise me if some \n\tcrazy coder on Shadertoy dreams up a better way. :)\n\n\t\/\/ Practical usage. More than one tweet. :)\n\tCellular Lattice - Shane\n\thttps:\/\/www.shadertoy.com\/view\/XsKXRh\n\n*\/\n\n\/\/ Coyote got it down to 124 chars, and with movement, but\n\/\/ I'm wasting some of it on resolution independency for \n\/\/ better thumbnails. :) The original is below, if the \n\/\/ following is too esoteric.\n\n\/\/ Wrappable, repeat distance metric.\n#define f length(fract(p*=mat2(7, -5, 5, 7)*.1) - .5)\n\nvoid mainImage(out vec4 o, vec2 p){\n    \n    \/\/ Screen coordinates and movement.\n    \/\/p = p\/65. + iDate.w; \/\/ 124 character version.\n    p = p\/iResolution.y*7. + iDate.w;\n    \n    \/\/ Very cheap wrappable cellular tiles.\n    o = o - o + min(min(f, f), f)\/.6;\n}\n\n\n\n\/*\n\/\/ Wrappable, repeat distance metric. It's faster to perform \n\/\/ the dot product and take the square root later, but we're \n\/\/ character saving.\n\n#define f(p) length(fract(p\/70.) - .5)\n\nvoid mainImage(out vec4 o, vec2 p){\n\t \n    \/\/ Movement. Just take the \"70\" out of the \"define\" above.\n    \/\/p = p\/70. + iDate.w; \n    \n    \/\/ Used to rotate cells with slight warping.\n    mat2 m = mat2(7, -5, 5, 7)*.1;\n    \n    \/\/ Very cheap wrappable cellular tiles.\n    o += min(min(f(p), f(p*m)), f(p*m*m))\/.6 - o;\n    \n}\n*\/","name":"Image","description":"","type":"image"}]}}