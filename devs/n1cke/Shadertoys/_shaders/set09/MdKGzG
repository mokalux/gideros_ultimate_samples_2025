{"Shader":{"ver":"0.1","info":{"id":"MdKGzG","date":"1455175620","viewed":293,"name":"Basic First Person Camera","username":"jackdavenport","description":"A basic implementation of a first person camera. It only samples from a cubemap but the same code can be used to control a raytracer\/raymarcher. (example here: https:\/\/www.shadertoy.com\/view\/ltXSzl)","likes":3,"published":3,"flags":0,"tags":["mouse","camera","cubemap","fp","firstperson","look","direction"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"vec2 rot2D(vec2 p, float angle) {\n \n    angle = radians(angle);\n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return p * mat2(c,s,-s,c);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - iResolution.xy * .5) \/ iResolution.y;\n    vec2  m = (iMouse.xy \/ iResolution.xy) * 2. - 1.;\n    \n    vec3 dir = vec3(uv, 1.);\n    dir.yz = rot2D(dir.yz,  90. * m.y);\n    dir.xz = rot2D(dir.xz, 180. * m.x);\n    \n\tfragColor = textureCube(iChannel0, dir);\n}","name":"Image","description":"","type":"image"}]}}