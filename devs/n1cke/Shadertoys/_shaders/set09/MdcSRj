{"Shader":{"ver":"0.1","info":{"id":"MdcSRj","date":"1460207160","viewed":258,"name":"Wormhood","username":"finalman","description":"Glowing microscopic worms? Maybe?","likes":9,"published":3,"flags":0,"tags":["distancefields"],"hasliked":0},"renderpass":[{"inputs":[{"id":34,"src":"\/presets\/mzk05.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"const int MAX_STEPS = 200;\nconst int NUM_SPHERES = 12;\n\nfloat sphere(vec3 pos, float radius, vec3 sample)\n{\n    return length(pos - sample) - radius;\n}\n\nfloat plane(vec3 dir, float offset, vec3 sample)\n{\n    return dot(dir, sample) + offset;\n}\n\nfloat dfDist(vec3 sample)\n{\n    float T1 = 10.0;\n    float T2 = 2.0 * T1;\n    \n    float result = 10000.0;\n    \n    sample.y += sin(sample.z * 0.2 + iGlobalTime) * sin(iGlobalTime * 1.33)\n              + sin(sample.x * 0.3 + iGlobalTime) * sin(iGlobalTime * 3.22)\n              + sin(sample.x * 0.5 + sample.z * 0.22 + iGlobalTime) * sin(iGlobalTime * 2.22 + sample.z * 0.1);\n    float o = floor((sample.z + T1) \/ T2);\n    sample.x += o * 7.0;\n    sample.xz = mod(sample.xz + T1, T2) - T1;\n    \n    for (int i = 0; i < NUM_SPHERES; i++)\n    {\n        float t = float(i) \/ float(NUM_SPHERES);\n        float n = t + iGlobalTime * 0.25 + o * 0.5;\n        vec3 pos = vec3(sin(n * 5.0) * 5.0, cos(n * 3.0) * 9.0, cos(n * 2.0) * 3.0 + 5.0);\n        float radius = texture2D(iChannel0, vec2(t*t)).x * 2.0 + 1.4;\n        result = min(result, sphere(pos, radius, sample));\n    }\n    \n    result = min(result, plane(vec3(0, -1, 0), 10.0, sample));    \n    result = min(result, plane(vec3(0, 1, 0), 10.0, sample));    \n    \n    return result;\n}\n\nvec3 dfNormal(vec3 sample)\n{\n    const float E = 0.04;\n    \n    float d0 = dfDist(sample);\n    float dX = dfDist(sample + vec3(E, 0, 0));\n    float dY = dfDist(sample + vec3(0, E, 0));\n    float dZ = dfDist(sample + vec3(0, 0, E));\n    \n    return normalize(vec3(dX - d0, dY - d0, dZ - d0));\n}\n\nfloat dfOcclusion(vec3 sample, vec3 normal)\n{\n    float N = 1.0;\n    return clamp(dfDist(sample + normal * N) \/ N, 0.0, 1.0);\n}\n\nfloat trace(inout vec3 pos, vec3 dir, out vec3 normal)\n{\n    int steps = 0;\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        steps++;\n        float d = dfDist(pos);\n        pos += d * dir * 1.0;\n        \n        if (d < 0.001)\n        {\n            break;\n        }\n    }\n    \n    normal = dfNormal(pos);\n    return float(steps) \/ float(MAX_STEPS);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 opos = vec3(4.5,sin(iGlobalTime * 0.4) * 3.0 + 2.0,-7.0 + iGlobalTime * 3.0);\n    vec3 pos = opos;\n    vec3 dir = normalize(vec3((fragCoord.x - iResolution.x * 0.5) \/ iResolution.y, fragCoord.y \/ iResolution.y - 0.5, 1.0));\n    vec3 normal;\n    \n    float steps = trace(pos, dir, normal);\n    float occ = dfOcclusion(pos, normal);\n    float fogAmt = 1.0 - exp(-distance(opos, pos) * 0.01);\n    vec3 fogCol = vec3(0.2, 0.14, 0.18);\n    \n    vec3 diffuse = vec3(0.4, 0.5, 0.6) * dot(normal, normalize(vec3(1.0, 0.3, -1.0)));\n    vec3 ambient = vec3(0.4, 0.2, 0.1);\n    vec3 color = (ambient + diffuse) * vec3(1.0 - steps) + pow(1.0 - occ, 1.5) * vec3(1.0, 0.9, 0.8) * 0.8;\n    \n    \n    color = mix(color, fogCol, fogAmt);\n    color = (1.0 - exp(-color * 1.5)) * 1.3;\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}}