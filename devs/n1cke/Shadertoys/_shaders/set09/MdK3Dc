{"Shader":{"ver":"0.1","info":{"id":"MdK3Dc","date":"1456887424","viewed":254,"name":"Colorful Ghosting","username":"granito","description":"second shader. change 'resdiv' in BufA to adjust sobel line thickness - sobel ripped from https:\/\/www.shadertoy.com\/view\/MlBSWW ","likes":9,"published":3,"flags":96,"tags":["2d","sobel","multipass"],"hasliked":0},"renderpass":[{"inputs":[{"id":15,"src":"\/presets\/tex10.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":2378,"src":"https:\/\/soundcloud.com\/awitw\/night-crawler","ctype":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 \/ 3.0, 1.0 \/ 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 ACESFilm( vec3 x )\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return clamp((x*(a*x+b))\/(x*(c*x+d)+e), 0.0, 1.0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \/\/ hue variations\n    \n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    float time = iGlobalTime * 0.4;\n        \n    vec4 c = texture2D(iChannel0, uv ).rgba;\n \n    vec2 scalefx = vec2(sin(iGlobalTime), cos(1.0-iGlobalTime)) * 0.5 + 0.5;\n    float noise = texture2D(iChannel1, uv * scalefx + vec2(cos(iGlobalTime), sin(iGlobalTime))).r * 0.5;\n    noise +=  texture2D(iChannel1, uv * scalefx + vec2(sin(iGlobalTime), cos(iGlobalTime))).r *0.3;\n    noise +=  texture2D(iChannel1, uv * scalefx - vec2(sin(iGlobalTime), sin(iGlobalTime))).r *0.2;\n    noise = mix(noise, 1.0-noise, c.a);\n    vec3 bgcolor = mix( hsv2rgb( vec3(time+0.4,0.4,0.15)), hsv2rgb( vec3(time+0.1,0.6,0.3)), c.a  );\n\tc.rgb += bgcolor * noise;\n    \n      \n    \/\/ tonemapping\n    c *= 4.0;  \n\n\tc.rgb = ACESFilm(c.rgb);\n    \n    c = c * c * c;\n    \n    \n\tfragColor = vec4(c.rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":15,"src":"\/presets\/tex10.png","ctype":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":36,"src":"\/presets\/vid03.webm","ctype":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":257,"channel":0}],"code":"#define resdiv 5\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 \/ 3.0, 1.0 \/ 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat sobelVideo(vec2 fragCoord)\n{\n\n   \tvec2 uv = fragCoord.xy \/ (iResolution.xy \/ vec2(resdiv));\n\n    vec3 col;\n    \n    \/*** Sobel kernels ***\/\n    \/\/ Note: GLSL's mat3 is COLUMN-major ->  mat3[col][row]\n    mat3 sobelX = mat3(-1.0, -2.0, -1.0,\n                       0.0,  0.0, 0.0,\n                       1.0,  2.0,  1.0);\n    mat3 sobelY = mat3(-1.0,  0.0,  1.0,\n                       -2.0,  0.0, 2.0,\n                       -1.0,  0.0,  1.0);  \n    \n    float sumX = 0.0;\t\/\/ x-axis change\n    float sumY = 0.0;\t\/\/ y-axis change\n    \n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j++)\n        {\n            \/\/ texture coordinates should be between 0.0 and 1.0\n            float x = (fragCoord.x + float(i)) \/ (iResolution.x \/ float(resdiv));\t\n    \t\tfloat y =  (fragCoord.y + float(j)) \/ (iResolution.y \/ float(resdiv));\n            \n            \/\/ Convolve kernels with image\n            sumX += length(1.0-texture2D( iChannel2, vec2(x, y) ).xyz) * float(sobelX[1+i][1+j]);\n            sumY += length(1.0-texture2D( iChannel2, vec2(x, y) ).xyz) * float(sobelY[1+i][1+j]);\n        }\n    }\n    \n    float g = abs(sumX) + abs(sumY);\n    g = sqrt((sumX*sumX) + (sumY*sumY));\n     \n    \n    if(g > 1.0)\n        col = vec3(1.0,1.0,1.0);\n    else\n        col = col * 0.0;\n    \n\treturn col.x;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n\n    float time = iGlobalTime * 0.4 + 0.1;\n    \n    float d;\n    \n            \n    float redc = clamp(texture2D(iChannel0, uv + (sin(time) * 0.0001 - 0.00005)).r, 0.0, 1.0);\n    float greenc = clamp(texture2D(iChannel0, uv + (-sin(time) * 0.0001 - 0.00005)).g, 0.0, 1.0);    \n    float bluec = clamp(texture2D(iChannel0, uv + (-cos(time) * 0.0001 - 0.00005)).b, 0.0, 1.0);    \n    vec3 greenscreen = texture2D(iChannel2, uv).rgb;\n    float alpha;    \n        \n    if (greenscreen.g > 0.5 && greenscreen.r < 0.2) \n    {\n     alpha = 0.0;\n    }\n    else\n    {\n     alpha = 1.0;\n    }\n    \n\tvec3 c = 0.999 * vec3(redc,greenc,bluec);\n    \n    c = c * (0.95 + 0.05 * c);\n    \n    vec3 color = hsv2rgb( vec3(time*1.0, 0.3, fract(time) ) );\n\n  \n    d = sobelVideo(fragCoord.xy * (1.0\/float(resdiv)));\n        \n\tc = max(c, color * d );\n        \n    \n    fragColor = vec4(c.rgb,alpha);\n    \n}\n","name":"Buf A","description":"","type":"buffer"}]}}