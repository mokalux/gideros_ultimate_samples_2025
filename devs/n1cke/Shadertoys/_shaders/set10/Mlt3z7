{"Shader":{"ver":"0.1","info":{"id":"Mlt3z7","date":"1468613629","viewed":157,"name":"RayMarching1_sp","username":"SmartPointer","description":"Ray marching test","likes":1,"published":3,"flags":0,"tags":["raymarching"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/\/ distance functions\nfloat sphereDist(vec3 pos, float radius) {\n    return length(pos) - radius;\n}\n\nfloat boxDist(vec3 pos, vec3 size) {\n    return length(max(abs(pos) - size, 0.0));\n}\n\nfloat calcDist(vec3 pos) {\n    return max(boxDist(pos, vec3(1.0, 1.0, 1.0)), -sphereDist(pos, 1.25));\n}\n\n\n\/\/ Blinn-Phong illumination\nvec3 calcAmbient(vec3 la, float ka) {\n    return la * ka;\n}\n\nvec3 calcDiffuse(vec3 ld, float kd, vec3 surfaceNormal, vec3 vecToLight) {\n    return ld * kd * max(-1.0, dot(surfaceNormal, vecToLight));\n}\n\nvec3 calcSpecular(vec3 ls, float ks, vec3 dir, vec3 reflectionApprox, float shininess) {\n    return ls * ks * max(1.0, pow(dot(reflectionApprox, dir), shininess));\n}\n\nvec3 calcBlinnPhong(vec3 pos, vec3 dir, vec3 lightPos, vec3 lightColor, vec3 normal) {\n    const float ka = 0.1;\n    const float kd = 0.3;\n    const float ks = 0.8;\n    const float shininess = 16.0;\n    vec3 vecToLight = normalize(lightPos - pos);\n    vec3 surfaceNormal = normal;\n    vec3 reflectionApprox = (vecToLight + (-dir)) \/ length(vecToLight + dir);\n    \n    \/\/ ambient\n    vec3 color = calcAmbient(lightColor, ka);\n    \n    \/\/ diffuse\n    color += calcDiffuse(lightColor, kd, surfaceNormal, vecToLight);\n    \n    \/\/ specular\n    color += calcSpecular(lightColor, ks, -dir, -1.0 * reflectionApprox, shininess);\n    \n    return color;\n}\n\n\n\/\/ main ray marching\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \/\/ camera\n    vec3 cameraOrigin = vec3(2.5 * cos(iGlobalTime * 0.5), 2.5 * cos(iGlobalTime * 0.5), 2.5 * sin(iGlobalTime * 0.5));\n    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 upDir = vec3(0.0, 1.0, 0.0);\n    vec3 cameraDir = normalize(cameraTarget - cameraOrigin);\n    vec3 cameraRight = normalize(cross(upDir, cameraDir));\n    vec3 cameraUp = cross(cameraRight, cameraDir);\n    \n    vec2 screenPos = gl_FragCoord.xy \/ iResolution.xy * 2.0 - 1.0;\t\t\/\/ clamp to -1.0, 1.0\n    screenPos.x *= iResolution.x \/ iResolution.y;\t\t\/\/ correct aspect ratio\n    \n    vec3 rayDir = normalize(cameraDir + cameraRight * screenPos.x + cameraUp * screenPos.y);\n    \n    \/\/ ray marching\n    const int MAX_ITER = 100;\n    const float MAX_DIST = 20.0;\n    const float EPSILON = 0.001;\n    \n    float totalDist = 0.0;\n    vec3 pos = cameraOrigin;\n    float dist = EPSILON;\n    \n    for (int i = 0; i < MAX_ITER; i++) {\n        \/\/ dist < EPSILON ... the ray hit an object\n        \/\/ totalDist > MAX_DIST ... assume that the ray will never hit anything\n        if (dist < EPSILON || totalDist > MAX_DIST) {\n            break;\n        }\n        \n        dist = calcDist(pos);\n        totalDist += dist;\n        pos += dist * rayDir;\n        \n        if (dist < EPSILON) {\t\t\/\/ ray hit an object\n            vec2 eps = vec2(0.0, EPSILON);\n            vec3 normal = normalize(vec3(\n                calcDist(pos + eps.yxx) - calcDist(pos - eps.yxx),\n                calcDist(pos + eps.xyx) - calcDist(pos - eps.xyx),\n                calcDist(pos + eps.xxy) - calcDist(pos - eps.xxy)));\n            fragColor = vec4(calcBlinnPhong(pos, rayDir, vec3(0.0, 0.0, -6.0), vec3(0.2, 0.7, 0.8), normal), 1.0);\n        } else {\n            fragColor = vec4(0.0);\n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}}