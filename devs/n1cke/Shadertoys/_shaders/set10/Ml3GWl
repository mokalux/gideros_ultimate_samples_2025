{"Shader":{"ver":"0.1","info":{"id":"Ml3GWl","date":"1472373739","viewed":123,"name":"permutation cycles","username":"FabriceNeyret2","description":"Creates a permutation table (see bufA for deterministic vs varying).\n\nDisplay: permutation value (grey), position (small), orbit length (color), orbit ID (small)\n( you can compare to Bayer Matrix (checkboard) instead of BufA ).","likes":2,"published":3,"flags":32,"tags":["cycles","orbits","permutation"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ analyse a permutation matrix.\n\/\/ use either custom permutation BufA or Bayer matrix (checkboard)\n\/\/ ( see also https:\/\/www.shadertoy.com\/view\/XsdXRM )\n\nbool D(vec2 p, float n) {                                \/\/ digit sprite\n    int i=int(p.y), b=int(exp2(floor(30.-p.x-n*3.)));\n    i = ( p.x<0.||p.x>3.? 0:\n    i==5? 972980223: i==4? 690407533: i==3? 704642687: i==2? 696556137:i==1? 972881535: 0 )\/b;\n \treturn i-i\/2*2==1;\n}\nvec4 N(float s, int x, int y, float C, vec2 U, vec4 O) { \/\/ display 2 digits\n    return    D(U*s-vec2(x  ,y), floor(C\/10.) )\n           || D(U*s-vec2(x+4,y), mod(floor(C),10.))\n           ? fract(O+.5) : O;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n\n\/**\/  \n    \/\/ --- display the permutation matrix\n    vec2 P = floor((U-.5)\/R*8.);\n    O = texture2D(iChannel0,(.5+P)\/iChannelResolution[0].xy);\n    float T = P.x+8.*P.y, m,           \/\/ position\n          C = floor(O.x *63.+.5);      \/\/ permutation\n\tU = fract(U\/R*8.);\n    O = N(32., 0,14, T, U, O);         \/\/ display pos\n    O = N(16., 4, 9, C, U, O);         \/\/ display permutation\n\n    T = C; m=T;\n    for (float i = 1.; i < 65.; i++) { \/\/ itered permutations\n        T = floor(.5+ 63.* texture2D(iChannel0,(.5+vec2(mod(T,8.),floor(T\/8.)))\/iChannelResolution[0].xy).x);\n        m = min(m,T);\n        if (T==C) { C=i; break; }\n    }\n    O.r  = N(16., 4, 1, C, U, O).r;    \/\/ display orbit length\n    O.rg = N(32., 24, 4, m, U, O).rg;  \/\/ display orbit ID\n\n\/**   \n    \/\/ --- display iterated permutations \n    O -= O;\n\tU = (U-.5)\/R * 64.;\n    \n    float t = floor(U.x);\n    for (int i = 0; i < 64; i++) \/\/ itered permutations\n        if (i < int(U.y))\n            t = floor(.5+ 63.* texture2D(iChannel0,(.5+vec2(mod(t,8.),floor(t\/8.)))\/iChannelResolution[0].xy).x);\n\tO += (t+1.)\/64.;\n\/**\/\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ generates a permutation table\n\n#define N 8.\n\n#define t float(iFrame)          \/\/ deterministic seed\n\/\/#define t (60.*iGlobalTime)    \/\/ time seed\n\n#define rnd(x)    fract(4563.*sin(1e4*(x)-17.53*t))\n#define rnd2(x,y) fract(4563.*sin(1e4*((x)+.017*(y))-17.53*t))\n#define T(U) texture2D(iChannel0, mod(.5+U,N)\/iResolution.xy)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    if (iFrame<1) {\n        O +=  ( U.x + N*U.y +.0*.5 ) \/ (N*N-1.) -O;\n        return;\n    }\n    \n    O = T(U);\n    \n    if (iFrame > 150) return;\n    \n    float n = mod(float(iFrame),3.);\n    if (n==0.) O = T(U+1.);                \/\/ offset\n    \n    if (n==1. &&\n        rnd2(floor(U.x\/2.),U.y) < .5 )    \/\/ random twin-lines permutations\n           O = T(U-vec2(2.*mod(U.x,2.)-1., 0));\n    \n    if (n==2. &&\n        rnd2(U.x,floor(U.y\/2.)) < .5 )    \/\/ random twin-columns permutations\n           O = T(U-vec2(0, 2.*mod(U.y,2.)-1.));\n}","name":"Buf A","description":"","type":"buffer"}]}}