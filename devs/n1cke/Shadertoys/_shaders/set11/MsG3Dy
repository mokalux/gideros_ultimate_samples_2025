{"Shader":{"ver":"0.1","info":{"id":"MsG3Dy","date":"1456172138","viewed":231,"name":"Yin Yang Redux 138 chars","username":"GregRostami","description":"This is an update to our attempts to make a Yin Yang in ONE TWEET!<br\/>All of the amazing reductions were done with some BIG help from Fabrice and coyote:<br\/>https:\/\/www.shadertoy.com\/view\/ldVGzK<br\/>","likes":1,"published":3,"flags":0,"tags":["short","tweet","2tc"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/\/ 138 chars - Added REAL centering code. Regardless of aspect ratio, it's always centered.\n\/\/ Super Fabrice helped me save 2 more chars ... :)\n\/**\/\nvoid mainImage(out vec4 o,vec2 i)\n{\n\tfloat a = dot(i = (i + i - (o.xy=iResolution.xy) )\/o.y , i), b = abs(i.y);\n    o += (a>1. ? .5 : 9.\/(b-a-.23)\/(b>a ? -i.y : i.x))-o;\n}\n\/**\/\n\n\/\/ Small Spin version - 172 chars:\n\/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float t=iDate.w, c=cos(t), s=sin(t),\n    a = dot(i=mat2(-c,s,s,c)*(2.*i\/iResolution.y-1.) ,i), b = abs(i.y);\n    o += (a>1. ? .5 : 9.\/(b-a-.23)\/(b>a ? i.y : i.x))-o;\n}\n*\/\n\n\/\/ 136 chars - An updated version of the Yin Yang shader that Fabrice, coyote and I size optimized.\n\/\/ The Yin Yang now has a grey background and spins clockwise ... and still under ONE TWEET!\n\/\/ Thanks to Fabrice, we saved another 5 chars!!\n\/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n\ti\/=iResolution.y*.5;\n    i.x -= .8;\n\tfloat a = dot(--i,i), b = abs(i.y);\n    o += ( a>1. ? .5 : 9.\/(b-a-.23)\/(b>a ? -i.y : i.x)) - o;\n}\n*\/\n\n\/\/ 129 chars - As the TITANS of optimization (Fabrice & coyote) battle, another 2 chars vanish!\n\/\/ A BIG thank you to coyote and Fabrice ... this is an algorithmic MIRACLE!!\n\/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n\ti\/=iResolution.y*.5;\n    i.x-=.8;\n\tfloat a = dot(--i,i), b = abs(i.y);\n    o += 9.\/(b>a ? (b-a-.23)*i.y : --a*i.x)-o;\n}\n*\/\n\n\/\/ 121 chars - Not centerd version ... Fabrice, once again did the IMPOSSIBLE!!\n\/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float a = dot(i=2.*i\/iResolution.y-1. ,i), b = abs(i.y);\n    o += 9.\/(b>a ? (b-a-.23)*i.y : --a*i.x) - o;\n}\n*\/\n\n\/\/ Here it is centered with Fabrice's optimization - 131 chars (-3 chars because of coyote)\n\/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n\ti\/=iResolution.y*.5;\n    i.x-=.8;\n    float a = dot(--i,i), b = abs(i.y)-a;\n\to += --a*(b>0.? i.y : i.x )*(b-.23)*1e6 -o;\n}\n*\/\n\n\/\/ 138 chars - coyote magically made another character disappear \n\/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float a = dot(i=2.*i\/iResolution.y-1. ,i), b = abs(i.y)-a;\n\to = vec4( --a*(b-.23) * (i.x+i.y + sign(b)*(i.y-i.x)) > 0. );\n}\n*\/\n\n\/\/ Original version at 139 chars by Greg Rostami\n\/*\nvoid mainImage(out vec4 o,vec2 i)\n{\n    float a = dot(i=2.*i\/iResolution.y-1. ,i), b = abs(i.y)-a;\n\to = o-o+sign( --a*(b-.23) * (i.x+i.y + sign(b)*(i.y-i.x)) );\n}\n*\/","name":"Image","description":"","type":"image"}]}}