{"Shader":{"ver":"0.1","info":{"id":"4s3SWX","date":"1462804738","viewed":186,"name":"\u2603","username":"piotrekli","description":"RGB waves\nYou can change the image in Buffer D","likes":3,"published":3,"flags":32,"tags":["test","rgb"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tfragColor = vec4(texture2D(iChannel0, uv).x, texture2D(iChannel1, uv).x, texture2D(iChannel2, uv).x, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":257,"channel":0}],"code":"#define WAVE_SPEED 4.0\n#define DAMPING 0.999\n\nfloat laplacianX(sampler2D channel, vec2 fragCoord)\n{\n    float laplacian;\n#   define S(DX, DY, WEIGHT) laplacian += texture2D(channel, (fragCoord+vec2(DX, DY))\/iResolution.xy).x*WEIGHT;\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n#   undef S\n    return laplacian;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 prevColor = texture2D(iChannel0, uv);\n    if (iFrame < 32) prevColor = vec4(texture2D(iChannel1, uv).x, 0.0, 0.0, 0.0);\n    float displ = prevColor.x;\n    float delta = prevColor.z * DAMPING;\n    delta += laplacianX(iChannel0, fragCoord)*WAVE_SPEED;\n    fragColor = vec4(displ+delta*iTimeDelta, 0.0, delta, 0.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":258,"channel":0}],"code":"#define WAVE_SPEED 4.0\n#define DAMPING 0.999\n\nfloat laplacianX(sampler2D channel, vec2 fragCoord)\n{\n    float laplacian;\n#   define S(DX, DY, WEIGHT) laplacian += texture2D(channel, (fragCoord+vec2(DX, DY))\/iResolution.xy).x*WEIGHT;\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n#   undef S\n    return laplacian;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 prevColor = texture2D(iChannel0, uv);\n    if (iFrame < 32) prevColor = vec4(texture2D(iChannel1, uv).y, 0.0, 0.0, 0.0);\n    float displ = prevColor.x;\n    float delta = prevColor.z * DAMPING;\n    delta += laplacianX(iChannel0, fragCoord)*WAVE_SPEED;\n    fragColor = vec4(displ+delta*iTimeDelta, 0.0, delta, 0.0);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":259,"channel":0}],"code":"#define WAVE_SPEED 4.0\n#define DAMPING 0.999\n\nfloat laplacianX(sampler2D channel, vec2 fragCoord)\n{\n    float laplacian;\n#   define S(DX, DY, WEIGHT) laplacian += texture2D(channel, (fragCoord+vec2(DX, DY))\/iResolution.xy).x*WEIGHT;\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n#   undef S\n    return laplacian;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 prevColor = texture2D(iChannel0, uv);\n    if (iFrame < 32) prevColor = vec4(texture2D(iChannel1, uv).z, 0.0, 0.0, 0.0);\n    float displ = prevColor.x;\n    float delta = prevColor.z * DAMPING;\n    delta += laplacianX(iChannel0, fragCoord)*WAVE_SPEED;\n    fragColor = vec4(displ+delta*iTimeDelta, 0.0, delta, 0.0);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":8,"src":"\/presets\/tex07.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":260,"channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n\tfragColor = texture2D(iChannel0, uv);\n}","name":"Buf D","description":"","type":"buffer"}]}}