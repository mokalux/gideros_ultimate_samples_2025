{"Shader":{"ver":"0.1","info":{"id":"4sKSWh","date":"1464093108","viewed":194,"name":"Rotating_square","username":"FurryLiso","description":"\/","likes":4,"published":3,"flags":0,"tags":["2d","rotate","square"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"#define RotatingMat(Angle) mat2(cos(Angle),sin(Angle),-sin(Angle),cos(Angle))\n#define RGBA(R, G, B, A) vec4(float(R), float(G), float(B), float(A)) \/ 255.0\nconst float Pi = 3.1415;\nconst float RotatingSpeed = 100.0;\n\nstruct Square\n{\n    vec2 A;\n    vec2 B;\n    vec2 C;\n    vec2 D;\n    vec4 ColorSquare;\n};\n\nSquare SetSquare(float Width, vec4 Color)\n{\n    vec2 A = vec2(iResolution.x \/ 2.0 - Width, iResolution.y \/ 2.0 - Width);\n    vec2 B = vec2(iResolution.x \/ 2.0 - Width, iResolution.y \/ 2.0 + Width);\n    vec2 C = vec2(iResolution.x \/ 2.0 + Width, iResolution.y \/ 2.0 + Width);\n    vec2 D = vec2(iResolution.x \/ 2.0 + Width, iResolution.y \/ 2.0 - Width);\n    return Square(A, B, C, D, Color);\n}\n\nbool PointInSquare(vec2 Point, Square S)\n{\n    float A1 = (S.A.x - Point.x) * (S.B.y - S.A.y) - (S.B.x - S.A.x) * (S.A.y - Point.y);\n    float B1 = (S.B.x - Point.x) * (S.D.y - S.B.y) - (S.D.x - S.B.x) * (S.B.y - Point.y);\n    float C1 = (S.D.x - Point.x) * (S.A.y - S.D.y) - (S.A.x - S.D.x) * (S.D.y - Point.y);\n    \n    float A2 = (S.B.x - Point.x) * (S.C.y - S.B.y) - (S.C.x - S.B.x) * (S.B.y - Point.y);\n    float B2 = (S.C.x - Point.x) * (S.D.y - S.C.y) - (S.D.x - S.C.x) * (S.C.y - Point.y);\n    float C2 = (S.D.x - Point.x) * (S.B.y - S.D.y) - (S.B.x - S.D.x) * (S.D.y - Point.y);\n    \n    return ((A1 >= 0.0 && B1 >= 0.0 && C1 >= 0.0) || (A1 <= 0.0 && B1 <= 0.0 && C1 <= 0.0))\n         ||((A2 >= 0.0 && B2 >= 0.0 && C2 >= 0.0) || (A2 <= 0.0 && B2 <= 0.0 && C2 <= 0.0));\n}\n\nvec4 DrawSquare(vec2 Pixel, Square S)\n{\n    if(PointInSquare(Pixel, S))\n    \treturn S.ColorSquare;\n    else\n        return vec4(1.0);\n}\n\nSquare RotateSquare(Square S, float Angle)\n{\n    Angle *= Pi \/ 180.0;\n    \n    vec2 A, B, C, D;\n    vec2 Centr;\n    \n    Centr = iResolution.xy \/ 2.0;\n    \n    A = (S.A - Centr) * RotatingMat(Angle) + Centr;\n    B = (S.B - Centr) * RotatingMat(Angle) + Centr;\n    C = (S.C - Centr) * RotatingMat(Angle) + Centr;\n    D = (S.D - Centr) * RotatingMat(Angle) + Centr;\n    \n\treturn Square(A, B, C, D, S.ColorSquare);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    Square S = SetSquare(50.0, RGBA(255, 100, 0, 255));\n    S = RotateSquare(S, iGlobalTime * RotatingSpeed);\n    fragColor = DrawSquare(fragCoord, S);\n}","name":"Image","description":"","type":"image"}]}}