{"Shader":{"ver":"0.1","info":{"id":"4sf3Rn","date":"1358124981","viewed":1841,"name":"Planet","username":"iq","description":"A planet rotating","likes":10,"published":3,"flags":0,"tags":["2d","planet"],"hasliked":0},"renderpass":[{"inputs":[{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":45,"src":"\/presets\/tex17.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec3 doit( in vec2 pix )\n{\n    vec2 p = -1.0 + 2.0*pix;\n    p.x *= iResolution.x\/iResolution.y;\n\n    vec3 ro = vec3( 0.0, 0.0, 2.5 );\n    vec3 rd = normalize( vec3( p, -2.0 ) );\n\n    vec3 col = vec3(0.1);\n\n    \/\/ intersect sphere\n    float b = dot(ro,rd);\n    float c = dot(ro,ro) - 1.0;\n    float h = b*b - c;\n    if( h>0.0 )\n    {\n        float t = -b - sqrt(h);\n        vec3 pos = ro + t*rd;\n        vec3 nor = pos;\n\n        \/\/ texture mapping\n        vec2 uv;\n        uv.x = atan(nor.x,nor.z)\/6.2831 - 0.03*iGlobalTime - iMouse.x\/iResolution.x;\n        uv.y = acos(nor.y)\/3.1416;\n\t\tuv.y *= 0.5;\n\n        col = vec3(0.2,0.3,0.4);\n        vec3 te  = 1.0*texture2D( iChannel1, 0.5*uv.yx ).xyz;\n             te += 0.3*texture2D( iChannel1, 2.5*uv.yx ).xyz;\n\t\tcol = mix( col, (vec3(0.2,0.5,0.1)*0.55 + 0.45*te + 0.5*texture2D( iChannel0, 15.5*uv.yx ).xyz)*0.4, smoothstep( 0.45,0.5,te.x) );\n\n        vec3 cl = texture2D( iChannel0, 2.0*uv ).xxx;\n\t\tcol = mix( col, vec3(0.9), 0.75*smoothstep( 0.55,0.8,cl.x) );\n\t\n        \/\/ lighting\n        float dif = max(nor.x*2.0+nor.z,0.0);\n        float fre = 1.0-clamp(nor.z,0.0,1.0);\n        float spe = clamp( dot( nor,normalize(vec3(0.4,0.3,1.0)) ), 0.0, 1.0 );\n        col *= 0.03 + 0.75*dif;\n        col += pow(spe,64.0)*(1.0-te.x);\n        col += mix( vec3(0.20,0.10,0.05), vec3(0.4,0.7,1.0), dif )*0.3*fre;\n        col += mix( vec3(0.10,0.10,0.10), vec3(0.7,0.9,1.0), dif )*7.0*fre*fre*fre*fre;\n    }\n\telse\n\t{\n\t\tc = dot(ro,ro) - 10.0;\n\t\th = b*b - c;\n        float t = -b - sqrt(h);\n        vec3 pos = ro + t*rd;\n        vec3 nor = pos;\n\n        vec2 uv;\n        uv.x = 16.0*atan(nor.x,nor.z)\/6.2831 - 0.05*iGlobalTime - iMouse.x\/iResolution.x;\n        uv.y = 2.0*acos(nor.y)\/3.1416;\n        col = texture2D( iChannel0, uv, 1.0 ).zyx;\n\t\tcol = col*col*col;\n        col *= 0.15;\n        vec3 sta = texture2D( iChannel0, 0.5*uv, 4.0 ).yzx;\n\t\tcol += pow(sta, vec3(8.0))*1.3;\n\n\t}\n\t\n    col = 0.5*(col+sqrt(col));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ render this with four sampels per pixel\n    vec3 col0 = doit( (fragCoord.xy+vec2(0.0,0.0) )\/iResolution.xy );\n    vec3 col1 = doit( (fragCoord.xy+vec2(0.5,0.0) )\/iResolution.xy );\n    vec3 col2 = doit( (fragCoord.xy+vec2(0.0,0.5) )\/iResolution.xy );\n    vec3 col3 = doit( (fragCoord.xy+vec2(0.5,0.5) )\/iResolution.xy );\n    vec3 col = 0.25*(col0 + col1 + col2 + col3);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}}