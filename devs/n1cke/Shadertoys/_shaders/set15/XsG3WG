{"Shader":{"ver":"0.1","info":{"id":"XsG3WG","date":"1456060774","viewed":312,"name":"Gray-Scott (faster version)","username":"piotrekli","description":"Version of XdG3WG using 4 buffers like in Knighty's reaction-diffusion shader (MdVGRh).","likes":3,"published":3,"flags":32,"tags":["2d","diffusion","reactiondiffusion","reaction","grayscott"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"float sampleLightY(sampler2D channel, vec2 fragCoord)\n{\n    float light;\n#   define S(DX, DY, WEIGHT) light += texture2D(channel, (fragCoord+vec2(DX, DY))\/iResolution.xy).y*WEIGHT;\n    S( 0,  1, -0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0, -0.2)\n#   undef S\n    return light;\n}\n\nvec3 hsv2rgb(vec3 hsv)\n{\n    vec3 rgb;\n    float h = mod(hsv.x * 6.0, 6.0);\n    float q = h-float(int(h));\n    if      (h < 1.0) rgb = vec3( 1.0,    q,  0.0);\n    else if (h < 2.0) rgb = vec3(1.-q,  1.0,  0.0);\n    else if (h < 3.0) rgb = vec3( 0.0,  1.0,    q);\n    else if (h < 4.0) rgb = vec3( 0.0, 1.-q,  1.0);\n    else if (h < 5.0) rgb = vec3(   q,  0.0,  1.0);\n    else if (h < 6.0) rgb = vec3( 1.0,  0.0, 1.-q);\n    rgb = hsv.z*(1.0-hsv.y*(1.0-rgb));\n    return rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    float uValue = texture2D(iChannel0, uv).x;\n    float light = sampleLightY(iChannel0, fragCoord)*8.0;\n\tfragColor = vec4(hsv2rgb(vec3(1.0-uValue*0.8-0.16,\n                                  light > 0.0 ? 1.-light : 1.,\n                                  light > 0.0 ? 1. : 1.+light)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":257,"channel":0}],"code":"#define DV 0.25 \/* scale *\/\n#define F 0.078 \/* feed parameter, see http:\/\/mrob.com\/pub\/comp\/xmorphia\/ *\/\n#define K 0.061 \/* kill parameter, see http:\/\/mrob.com\/pub\/comp\/xmorphia\/ *\/\n#define SPEED 30.0 \/* timestep *\/\n\nvec2 random(vec2 uv)\n{\n    return texture2D(iChannel3, uv).xy;\n}\n\n#define S(DX, DY, WEIGHT) laplacian += texture2D(channel, (fragCoord+vec2(DX, DY))\/iResolution.xy).xy*WEIGHT;\nvec2 laplacian(sampler2D channel, vec2 fragCoord)\n{\n    vec2 laplacian;\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n    return laplacian;\n}\n#undef S\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 prevColor = texture2D(iChannel0, uv);\n    float u = prevColor.x;\n    float v = prevColor.y;\n    if (iFrame == 1)\n    {\n        vec2 rand = random(uv);\n        u = rand.x;\n        v = rand.y;\n    }\n    else\n    {\n        float rate = u * v * v;\n        vec2 diffusion = laplacian(iChannel0, fragCoord);\n        float deltaU = diffusion.x*DV*2. - rate + F*(1.0-u);\n        float deltaV = diffusion.y*DV*1. + rate - v*(F+K);\n        float g = \/\/ mouse\n            0.9 - distance(iMouse.xy, fragCoord)*0.1;\n        if (g > v) v = g;\n        float dt = iTimeDelta * SPEED;\n        u += deltaU * dt;\n        v += deltaV * dt;\n    }\n    fragColor = vec4(u, v, 0.0, 0.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":258,"channel":0}],"code":"#define DV 0.25 \/* scale *\/\n#define F 0.078 \/* feed parameter, see http:\/\/mrob.com\/pub\/comp\/xmorphia\/ *\/\n#define K 0.061 \/* kill parameter, see http:\/\/mrob.com\/pub\/comp\/xmorphia\/ *\/\n#define SPEED 30.0 \/* timestep *\/\n\nvec2 random(vec2 uv)\n{\n    return texture2D(iChannel3, uv).xy;\n}\n\n#define S(DX, DY, WEIGHT) laplacian += texture2D(channel, (fragCoord+vec2(DX, DY))\/iResolution.xy).xy*WEIGHT;\nvec2 laplacian(sampler2D channel, vec2 fragCoord)\n{\n    vec2 laplacian;\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n    return laplacian;\n}\n#undef S\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 prevColor = texture2D(iChannel0, uv);\n    float u = prevColor.x;\n    float v = prevColor.y;\n    if (iFrame == 1)\n    {\n        vec2 rand = random(uv);\n        u = rand.x;\n        v = rand.y;\n    }\n    else\n    {\n        float rate = u * v * v;\n        vec2 diffusion = laplacian(iChannel0, fragCoord);\n        float deltaU = diffusion.x*DV*2. - rate + F*(1.0-u);\n        float deltaV = diffusion.y*DV*1. + rate - v*(F+K);\n        float g = \/\/ mouse\n            0.9 - distance(iMouse.xy, fragCoord)*0.1;\n        if (g > v) v = g;\n        float dt = iTimeDelta * SPEED;\n        u += deltaU * dt;\n        v += deltaV * dt;\n    }\n    fragColor = vec4(u, v, 0.0, 0.0);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":259,"channel":0}],"code":"#define DV 0.25 \/* scale *\/\n#define F 0.078 \/* feed parameter, see http:\/\/mrob.com\/pub\/comp\/xmorphia\/ *\/\n#define K 0.061 \/* kill parameter, see http:\/\/mrob.com\/pub\/comp\/xmorphia\/ *\/\n#define SPEED 30.0 \/* timestep *\/\n\nvec2 random(vec2 uv)\n{\n    return texture2D(iChannel3, uv).xy;\n}\n\n#define S(DX, DY, WEIGHT) laplacian += texture2D(channel, (fragCoord+vec2(DX, DY))\/iResolution.xy).xy*WEIGHT;\nvec2 laplacian(sampler2D channel, vec2 fragCoord)\n{\n    vec2 laplacian;\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n    return laplacian;\n}\n#undef S\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 prevColor = texture2D(iChannel0, uv);\n    float u = prevColor.x;\n    float v = prevColor.y;\n    if (iFrame == 1)\n    {\n        vec2 rand = random(uv);\n        u = rand.x;\n        v = rand.y;\n    }\n    else\n    {\n        float rate = u * v * v;\n        vec2 diffusion = laplacian(iChannel0, fragCoord);\n        float deltaU = diffusion.x*DV*2. - rate + F*(1.0-u);\n        float deltaV = diffusion.y*DV*1. + rate - v*(F+K);\n        float g = \/\/ mouse\n            0.9 - distance(iMouse.xy, fragCoord)*0.1;\n        if (g > v) v = g;\n        float dt = iTimeDelta * SPEED;\n        u += deltaU * dt;\n        v += deltaV * dt;\n    }\n    fragColor = vec4(u, v, 0.0, 0.0);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":260,"channel":0}],"code":"#define DV 0.25 \/* scale *\/\n#define F 0.078 \/* feed parameter, see http:\/\/mrob.com\/pub\/comp\/xmorphia\/ *\/\n#define K 0.061 \/* kill parameter, see http:\/\/mrob.com\/pub\/comp\/xmorphia\/ *\/\n#define SPEED 30.0 \/* timestep *\/\n\nvec2 random(vec2 uv)\n{\n    return texture2D(iChannel3, uv).xy;\n}\n\n#define S(DX, DY, WEIGHT) laplacian += texture2D(channel, (fragCoord+vec2(DX, DY))\/iResolution.xy).xy*WEIGHT;\nvec2 laplacian(sampler2D channel, vec2 fragCoord)\n{\n    vec2 laplacian;\n    S( 0,  0, -1.0)\n    S( 0,  1,  0.2)\n    S( 0, -1,  0.2)\n    S( 1,  0,  0.2)\n    S(-1,  0,  0.2)\n    S( 1,  1,  0.05)\n    S( 1, -1,  0.05)\n    S(-1,  1,  0.05)\n    S(-1, -1,  0.05)\n    return laplacian;\n}\n#undef S\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 prevColor = texture2D(iChannel0, uv);\n    float u = prevColor.x;\n    float v = prevColor.y;\n    if (iFrame == 1)\n    {\n        vec2 rand = random(uv);\n        u = rand.x;\n        v = rand.y;\n    }\n    else\n    {\n        float rate = u * v * v;\n        vec2 diffusion = laplacian(iChannel0, fragCoord);\n        float deltaU = diffusion.x*DV*2. - rate + F*(1.0-u);\n        float deltaV = diffusion.y*DV*1. + rate - v*(F+K);\n        float g = \/\/ mouse\n            0.9 - distance(iMouse.xy, fragCoord)*0.1;\n        if (g > v) v = g;\n        float dt = iTimeDelta * SPEED;\n        u += deltaU * dt;\n        v += deltaV * dt;\n    }\n    fragColor = vec4(u, v, 0.0, 0.0);\n}","name":"Buf D","description":"","type":"buffer"}]}}