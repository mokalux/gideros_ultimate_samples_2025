{"Shader":{"ver":"0.1","info":{"id":"XsVGDw","date":"1454888551","viewed":270,"name":"Standard Circle Map","username":"Flyguy","description":" An image of a circle map showing the average number of iterations until \u00ce\u00b8n+1 ~= \u00ce\u00b80 for random starting positions.\nBased off this image here: https:\/\/commons.wikimedia.org\/wiki\/File:Circle_map_poincare_recurrence.jpeg","likes":2,"published":3,"flags":32,"tags":["math","chaos","iteration","discrete"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/\/https:\/\/en.wikipedia.org\/wiki\/Arnold_tongue\n\nfloat tau = atan(1.0)*8.0;\n\nvec3 rainbow(float x)\n{\n    vec3 col = vec3(0);\n    col.r = cos(x * tau - (0.0\/3.0)*tau);\n    col.g = cos(x * tau - (1.0\/3.0)*tau);\n    col.b = cos(x * tau - (2.0\/3.0)*tau);\n    \n    return col * 0.5 + 0.5;\n}\n\nvec3 grad(float x)\n{\n\tvec3 col = vec3(0);\n    col = mix(vec3(0), rainbow(1.0 - x - 0.11), smoothstep(0.0, 0.3, x));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy \/ iResolution.y;\n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    \n    uv.x -= res.x\/2.0 - 0.5;\n    \n    float n = texture2D(iChannel0, uv).r \/ float(iFrame) \/ 256.0;\n    \n    vec3 col = grad(n * 5.0);\n    \n    col *= step(0.0, uv.x) - step(1.0, uv.x);\n    \n\tfragColor = vec4(col, 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":257,"channel":0}],"code":"#define ITERATIONS 256\n#define EPSILON 0.001\n\nfloat pi = atan(1.0)*4.0;\nfloat tau = atan(1.0)*8.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    \/\/Parameters Omega (0-1 along X), K (0 - 4pi along Y)\n    float Om = uv.x;\n    float K = uv.y * 4.0 * pi;\n    \n    \/\/Random initial value\n    vec2 offs = vec2(cos(iGlobalTime*5.532), sin(iGlobalTime*8.823));\n    float t0 = texture2D(iChannel1, ((uv + offs) * iResolution.xy) \/ iChannelResolution[1].xy).x;\n    \n    float tn = t0;\n    float tn1 = 0.0;\n    \n    \/\/number of iterations until |tn1 - t0| < epsilon\n\tfloat n = 0.0;\n    \n    for(int i = 0;i < ITERATIONS;i++)\n    {  \n        \/\/\u00ce\u00b8n+1 = \u00ce\u00b8n + \u00ce\u00a9 - (K\/2\u00cf\u20ac)sin(2\u00cf\u20ac*\u00ce\u00b8n)\n        \n        tn1 = fract(tn + Om - (K\/tau)*sin(tau*tn));\n        \n        if(abs(tn1 - t0) < EPSILON)\n        {\n            n = float(i);\n            break;\n        }\n        \n        tn = tn1;\n    }\n    \n    float ln = texture2D(iChannel0, uv).r;\n    \n    fragColor = vec4(ln + n,0,0,0);\n}","name":"Buf A","description":"","type":"buffer"}]}}