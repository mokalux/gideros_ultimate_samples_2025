{"Shader":{"ver":"0.1","info":{"id":"XstGRf","date":"1451724223","viewed":152,"name":"GameOfLife","username":"iq","description":"Conway's Game of Life [url]http:\/\/www.iquilezles.org\/www\/articles\/gameoflife\/gameoflife.htm[\/url]. Buffer A contains the world and it reads\/writes to itself to perform the simulation.","likes":2,"published":3,"flags":32,"tags":["2d","simulation","automata","conway","gameoflife","multipass"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n\tfloat c = texture2D( iChannel0, uv ).x;\n    \n    fragColor = vec4(c,c,c,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\n\/\/ Conway's Game of Life - http:\/\/www.iquilezles.org\/www\/articles\/gameoflife\/gameoflife.htm\n\/\/\n\/\/ State based simulation. Buffer A contains the simulated world, and it reads and writes to\n\/\/ itself to perform the simulation. The image pass renders the world: born cells in green, \n\/\/ dying cells in red and stable cells in yellow.\n\n\nfloat Cell( in vec2 p )\n{\n    return texture2D(iChannel0, fract(p\/iChannelResolution[0].xy) ).x;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n#if 1\n\tfloat k = Cell(px+vec2(-1,-1)) + Cell(px+vec2(0,-1)) + Cell(px+vec2(1,-1))\n            + Cell(px+vec2(-1, 0))                       + Cell(px+vec2(1, 0))\n            + Cell(px+vec2(-1, 1)) + Cell(px+vec2(0, 1)) + Cell(px+vec2(1, 1));\n\n    float e = Cell(px);\n\n    float f = mix( step(abs(k-3.0),0.1), \/\/ dead : 3   -> make alive\n                   step(abs(k-2.5),0.6), \/\/ alive: 2,3 -> keep alive\n                   e );\n#endif\n    \n#if 0\n\tfloat k = Cell(px+vec2(-1,-1)) + Cell(px+vec2(0,-1)) + Cell(px+vec2(1,-1))\n            + Cell(px+vec2(-1, 0)) + Cell(px           ) + Cell(px+vec2(1, 0))\n            + Cell(px+vec2(-1, 1)) + Cell(px+vec2(0, 1)) + Cell(px+vec2(1, 1));\n\n    float e = Cell(px);\n\n    float f = mix( step(abs(k-3.0),0.1),\n                   step(abs(k-3.5),0.6), \n                   e );\n#endif\n\n    \n#if 0\n\tfloat k = -Cell(px+vec2(-1,-1)) - Cell(px+vec2(0,-1)) - Cell(px+vec2(1,-1))\n              -Cell(px+vec2(-1, 0)) + 8.0*Cell(px)        - Cell(px+vec2(1, 0))\n              -Cell(px+vec2(-1, 1)) - Cell(px+vec2(0, 1)) - Cell(px+vec2(1, 1));\n\n    float f = step( 0.0, 4.5 - abs(k+3.0) * abs(k-5.5)  );\n#endif\n    \n    if( iFrame==0 ) f = step(0.9, hash1(px.x*13.0+hash1(px.y*71.1)));\n\t\n\tfragColor = vec4( f, .0, 0.0, 0.0 );\n}","name":"Buf A","description":"","type":"buffer"}]}}