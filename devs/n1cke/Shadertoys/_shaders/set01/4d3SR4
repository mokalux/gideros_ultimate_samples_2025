{"Shader":{"ver":"0.1","info":{"id":"4d3SR4","date":"1457787444","viewed":499,"name":"Pastelizer","username":"paniq","description":"This is a pastel hue function, extracted from the YCoCg colorspace at Y'=0.5, S=0.5, designed to provide a pleasing albedo basis for materials blended in linear colorspace, particularly when using filmic tonemapping.","likes":14,"published":3,"flags":0,"tags":["hue","tonemapping","filmic","pastel","albedo","hsy","hsyp"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/\/---------------------------------------------------------------------------------\n\nvec3 pastelizer(float h) {\n    h = fract(h + 0.92620819117478) * 6.2831853071796;\n    vec2 cocg = 0.25 * vec2(cos(h), sin(h));\n    vec2 br = vec2(-cocg.x,cocg.x) - cocg.y;\n    vec3 c = 0.729 + vec3(br.y, cocg.y, br.x);\n    return c * c;\n}\n\n\/\/---------------------------------------------------------------------------------\n\n\/\/ filmic without sRGB conversion\n\n\/\/ shoulder strength\nconst float A = 0.22;\n\/\/ linear strength\nconst float B = 0.3;\n\/\/ linear angle\nconst float C = 0.1;\n\/\/ toe strength\nconst float D = 0.20;\n\/\/ toe numerator\nconst float E = 0.01;\n\/\/ toe denominator\nconst float F = 0.30;\n\/\/ linear white point\nconst float W = 11.2;\nfloat filmic_curve(float x) {\n\treturn ((x*(A*x+C*B)+D*E)\/(x*(A*x+B)+D*F))-E\/F;\n}\nfloat inverse_filmic_curve(float x) {\n    float q = B*(F*(C-x) - E);\n    float d = A*(F*(x - 1.0) + E);\n    return (q -sqrt(q*q - 4.0*D*F*F*x*d)) \/ (2.0*d);\n}\nvec3 filmic(vec3 x) {\n    float w = filmic_curve(W);\n    return vec3(\n        filmic_curve(x.r),\n        filmic_curve(x.g),\n        filmic_curve(x.b)) \/ w;\n}\nvec3 inverse_filmic(vec3 x) {\n    x *= filmic_curve(W);\n    return vec3(\n        inverse_filmic_curve(x.r),\n        inverse_filmic_curve(x.g),\n        inverse_filmic_curve(x.b));\n}\n\n\/\/ taken from https:\/\/www.shadertoy.com\/view\/lsdGzN\nfloat sRGB(float t){ return mix(1.055*pow(t, 1.\/2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n\/\/---------------------------------------------------------------------------------\n\nvec2 uvcoords(vec2 p) {\n\tvec2 uv = p \/ iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    return uv;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = uvcoords(fragCoord);\n    \n    float h = (fragCoord.x \/ iResolution.x) + iGlobalTime * 0.5; \n    vec3 color1 = pastelizer(h);    \n    color1 *= exp2(((fragCoord.y \/ iResolution.y)*2.0-1.0)*4.0);\n    \n    vec2 n = normalize(uv);\n    vec3 color2 = pastelizer(atan(n.y,n.x) \/ 6.2831853071796);\n    color2 *= 1.0 \/ (0.01 + dot(uv,uv) * 10.0);\n    \n    float s = clamp(-atan(sin(iGlobalTime*0.49)*100.0)*0.5\/1.5 + 0.5,0.0,1.0);\n    vec3 color = pow(color1, vec3(1.0-s)) * pow(color2, vec3(s));\n\n    color = filmic(color);\n\tfragColor = vec4(sRGB(color),1.0);\n}","name":"Image","description":"","type":"image"}]}}