{"Shader":{"ver":"0.1","info":{"id":"4dySRw","date":"1463368303","viewed":196,"name":"Soft Filter","username":"dockusan","description":"Soft Filter","likes":2,"published":3,"flags":0,"tags":["softfilter"],"hasliked":0},"renderpass":[{"inputs":[{"id":11,"src":"\/presets\/vid00.ogv","ctype":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x\/(sigma*sigma))\/sigma;\n}\n\nfloat blendScreen(float base, float blend) {\n\treturn 1.0-((1.0-base)*(1.0-blend));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend) {\n\treturn vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\n}\n\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n\treturn (blendScreen(base, blend) * opacity + blend * (1.0 - opacity));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 c = texture2D(iChannel0, fragCoord.xy \/ iResolution.xy).rgb;\n\tif (fragCoord.x < iMouse.x)\n\t{\n\t\tfragColor = vec4(c, 1.0);\t\n\t} else {\n\t\t\n\t\t\/\/declare stuff\n\t\tconst int mSize = 11;\n\t\tconst int kSize = (mSize-1)\/2;\n\t\tfloat kernel[mSize];\n\t\tvec3 final_colour = vec3(0.0);\n\t\t\n\t\t\/\/create the 1-D kernel\n\t\tfloat sigma = 7.0;\n\t\tfloat Z = 0.0;\n\t\tfor (int j = 0; j <= kSize; ++j)\n\t\t{\n\t\t\tkernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n\t\t}\n\t\t\n\t\t\/\/get the normalization factor (as the gaussian has been clamped)\n\t\tfor (int j = 0; j < mSize; ++j)\n\t\t{\n\t\t\tZ += kernel[j];\n\t\t}\n\t\t\n\t\t\/\/read out the texels\n\t\tfor (int i=-kSize; i <= kSize; ++i)\n\t\t{\n\t\t\tfor (int j=-kSize; j <= kSize; ++j)\n\t\t\t{\n\t\t\t\tfinal_colour += kernel[kSize+j]*kernel[kSize+i]*texture2D(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) \/ iResolution.xy).rgb;\n\t\n\t\t\t}\n\t\t}\n\t\t\n        vec3 blenColor = blendScreen(c,final_colour\/(Z*Z),0.8);\n\n\t\tfragColor = vec4(blenColor.rgb, 1.0);\n\t}\n}","name":"Image","description":"","type":"image"}]}}