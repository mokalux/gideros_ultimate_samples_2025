{"Shader":{"ver":"0.1","info":{"id":"4tsGzf","date":"1423916689","viewed":2356,"name":"Texture variation I","username":"iq","description":"Avoiding texture repetition by using [url=https:\/\/www.shadertoy.com\/view\/Xd23Dh]Voronoise[\/url]: a small texture can be used to generate infinite variety instead of tiled repetition. t doesn't work with automatic mipmapping though.","likes":26,"published":3,"flags":0,"tags":["2d","voronoi","texture","voronoise"],"hasliked":0},"renderpass":[{"inputs":[{"id":47,"src":"\/presets\/tex19.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Created by inigo quilez - iq\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ One way to avoid texture tile repetition one using one small texture to cover a huge area.\n\/\/ Based on Voronoise (https:\/\/www.shadertoy.com\/view\/Xd23Dh), a random offset is applied to\n\/\/ the texture UVs per Voronoi cell. Distance to the cell is used to smooth the transitions\n\/\/ between cells.\n\n\/\/ More info here: http:\/\/www.iquilezles.org\/www\/articles\/texturerepetition\/texturerepetition.htm\n\n\nvec4 hash4( vec2 p ) { return fract(sin(vec4( 1.0+dot(p,vec2(37.0,17.0)), \n                                              2.0+dot(p,vec2(11.0,47.0)),\n                                              3.0+dot(p,vec2(41.0,29.0)),\n                                              4.0+dot(p,vec2(23.0,31.0))))*103.0); }\n\n\nvec3 textureNoTile( sampler2D samp, in vec2 uv, float v )\n{\n    vec2 p = floor( uv );\n    vec2 f = fract( uv );\n\t\n    \/\/ derivatives (for correct mipmapping)\n    vec2 ddx = dFdx( uv );\n    vec2 ddy = dFdy( uv );\n    \n\tvec3 va = vec3(0.0);\n\tfloat wt = 0.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec4 o = hash4( p + g );\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n        float w = exp(-5.0*d );\n        vec3 c = texture2DGradEXT( samp, uv + v*o.zw, ddx, ddy ).xyz;\n\t\tva += w*c;\n\t\twt += w;\n    }\n\t\n    return va\/wt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord \/ iResolution.x;\n\t\n\tfloat f = smoothstep( 0.4, 0.6, sin(iGlobalTime    ) );\n    float s = smoothstep( 0.4, 0.6, sin(iGlobalTime*0.5) );\n\n    vec3 col = textureNoTile( iChannel0, (4.0 + 4.0*s)*uv + iGlobalTime*0.1, f ).zyx;\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}}