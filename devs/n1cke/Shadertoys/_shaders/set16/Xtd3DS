{"Shader":{"ver":"0.1","info":{"id":"Xtd3DS","date":"1471379396","viewed":132,"name":"Sobel Operator Normal Map Gen","username":"fscur","description":"Can anyone revise this shader? Is it correct? Are the normals being correctly generated? The shading seems incorrect but I am not sure...","likes":0,"published":3,"flags":32,"tags":["sobelblurgrayscale"],"hasliked":0},"renderpass":[{"inputs":[{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"vec2 texelSize;\n\nvec4 sample(in vec2 uv)\n{\n\treturn texture2D(iChannel0, uv);\n}\n\nfloat sampleSobel(in vec2 uv)\n{\n    float weight = 1.0;\n\tfloat f = sample(uv).a;\n    return f * weight - (weight * 0.5);\n}\n\nvec2 sobel(in vec2 uv)\n{   \n    vec2 offset = texelSize * 1.0;\n    float x = offset.x;\n    float y = offset.y;\n    \n    \/\/ |-1  0  1|\n    \/\/ |-2  0  2| \n    \/\/ |-1  0  1|\n    \n    float gX = 0.0;\n    gX += -1.0 * sampleSobel(uv + vec2(-x, -y));\n    gX += -2.0 * sampleSobel(uv + vec2(-x,  0));\n    gX += -1.0 * sampleSobel(uv + vec2(-x, +y));\n    gX += +1.0 * sampleSobel(uv + vec2(+x, -y));\n    gX += +2.0 * sampleSobel(uv + vec2(+x,  0));\n    gX += +1.0 * sampleSobel(uv + vec2(+x, +y));\n    \n    \/\/ |-1 -2 -1|\n    \/\/ | 0  0  0| \n    \/\/ | 1  2  1|\n    \n    float gY = 0.0;\n    gY += -1.0 * sampleSobel(uv + vec2(-x, -y));\n    gY += -2.0 * sampleSobel(uv + vec2( 0, -y));\n    gY += -1.0 * sampleSobel(uv + vec2(+x, -y));\n    gY += +1.0 * sampleSobel(uv + vec2(-x, +y));\n    gY += +2.0 * sampleSobel(uv + vec2( 0, +y));\n    gY += +1.0 * sampleSobel(uv + vec2(+x, +y));\n    \n\treturn vec2(sqrt(gX * gX + gY * gY), atan(-gY, -gX));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    texelSize = (1.0\/iResolution.xy);\n\tvec2 uv = fragCoord.xy * texelSize;\n    \n    vec2 f = sobel(uv);\n    \n    vec2 gradientDirection = f.x * vec2(cos(f.y), sin(f.y));\n    vec3 normal = normalize(vec3(gradientDirection, 1.0));\n    \n    float lightAngle = iGlobalTime * 3.1415 * 0.3;\n    vec3 lightPos = vec3(cos(lightAngle), sin(lightAngle), 1.0);\n    \/\/vec3 lightPos = vec3(0.0, -1.0, 1.0);\n    vec3 lightDir = normalize(lightPos);\n    \n    \n    float diffuse = max(dot(lightDir, normal), 0.0);\n    \n    if (fragCoord.x < iMouse.x)\n    {\n        vec4 albedo = vec4(texture2D(iChannel0, uv).rgb, 1.0);\n        albedo += vec4(0.4);\n    \tfragColor =  albedo * diffuse;\n    }\n    else\n    \tfragColor = vec4(normal * 0.5 + 0.5, 1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":1,"src":"\/presets\/tex00.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ grayscale\n\nvec2 texelSize;\n\nvec4 sample(in vec2 uv)\n{\n\treturn texture2D(iChannel0, uv);\n}\n\nfloat grayScale(in vec3 color){\n    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    texelSize = (1.0\/iResolution.xy);\n\tvec2 uv = fragCoord.xy * texelSize;\n    \n    vec3 color = sample(uv).rgb;\n    fragColor = vec4(color, grayScale(color));\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ horizontal blur\n\nvec2 texelSize;\nfloat offset[3];\nfloat weight[3];\n\nvec4 sample(in vec2 uv)\n{\n\treturn texture2D(iChannel0, uv);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    offset[0] = 0.0;\n    offset[1] = 1.3846153846;\n    offset[2] = 3.2307692308;\n    \n    weight[0] = 0.2270270270;\n    weight[1] = 0.3162162162;\n    weight[2] = 0.0702702703;\n     \n    \n    texelSize = (1.0\/iResolution.xy);\n\tvec2 uv = fragCoord.xy * texelSize;\n    \n    vec4 color = sample(uv) * weight[0];\n\n    for (int i = 1; i < 3; ++i)\n    {\n        vec2 displacement = vec2(offset[i] \/ iResolution.x, 0.0);\n        color += sample(uv +displacement) * weight[i];\n        color += sample(uv -displacement) * weight[i];\n    }\n\n    fragColor = color;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":259,"channel":0}],"code":"\/\/ vertical blur\n\nvec2 texelSize;\nfloat offset[3];\nfloat weight[3];\n\nvec4 sample(in vec2 uv)\n{\n\treturn texture2D(iChannel0, uv);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    offset[0] = 0.0;\n    offset[1] = 1.3846153846;\n    offset[2] = 3.2307692308;\n    \n    weight[0] = 0.2270270270;\n    weight[1] = 0.3162162162;\n    weight[2] = 0.0702702703;\n     \n    \n    texelSize = (1.0\/iResolution.xy);\n\tvec2 uv = fragCoord.xy * texelSize;\n    \n    vec4 color = sample(uv) * weight[0];\n\n    for (int i = 1; i < 3; ++i)\n    {\n        vec2 displacement = vec2(0.0, offset[i] \/ iResolution.y);\n        color += sample(uv +displacement) * weight[i];\n        color += sample(uv -displacement) * weight[i];\n    }\n\n    fragColor = color;\n}","name":"Buf C","description":"","type":"buffer"}]}}