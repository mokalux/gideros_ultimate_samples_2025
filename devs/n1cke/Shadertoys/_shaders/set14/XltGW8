{"Shader":{"ver":"0.1","info":{"id":"XltGW8","date":"1469042663","viewed":139,"name":"RayMarching2_sp","username":"SmartPointer","description":"A very simple ray marcher.","likes":0,"published":3,"flags":0,"tags":["raymarching"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"float calcDistance(vec3 rayDir) {\n    return length(rayDir) - 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.0);\n    \n    \/\/ setup camera\n    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 cameraOrigin = vec3(1.0);\n    vec3 cameraDir = normalize(cameraTarget - cameraOrigin);\n    vec3 upDir = vec3(0.0, 1.0, 0.0);\n    vec3 cameraRight = cross(cameraDir, upDir);\n    vec3 cameraUp = cross(cameraRight, cameraDir);\n\n    \/\/ setup screen\n    vec2 screenPos = fragCoord.xy \/ iResolution.xy * 2.0 - 1.0;\t\t\/\/ clamp to -1.0, 1.0\n    screenPos.x *= iResolution.x \/ iResolution.y;\t\t\/\/ correct aspect ratio\n    \n    vec3 rayDir = cameraDir + screenPos.x * cameraRight + screenPos.y * cameraUp;\n\n    const int MAX_ITER = 100;\n    const float EPSILON = 0.001;\n    \n    \/\/ ray marching loop\n    float totalDist = 0.0;\n    for (int i = 0; i < MAX_ITER; i++) {\n    \tfloat dist = calcDistance(rayDir * totalDist + cameraOrigin);\n        totalDist += dist;\n    \tif (dist < EPSILON) { \/\/ intersection\n            color = vec3(1.0);\n            break;\n        } \n    }\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}}