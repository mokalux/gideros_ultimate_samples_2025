{"Shader":{"ver":"0.1","info":{"id":"ldK3zc","date":"1455722494","viewed":277,"name":"Buffer Upsizing","username":"demofox","description":"testing upsizing an off screen buffer.  Press 1 for nearest neighbor, 2 for bilinear, 3 for bilinear smoothstepped, 4 for bicubic. Note that the buffer is set to \"nearest\" filtering, not the default of \"linear\" which does hardware bilinear sampling.","likes":2,"published":3,"flags":48,"tags":["3d","upsize"],"hasliked":0},"renderpass":[{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ keys\nconst float KEY_1 = 49.5\/256.0;\nconst float KEY_2 = 50.5\/256.0;\nconst float KEY_3 = 51.5\/256.0;\nconst float KEY_4 = 52.5\/256.0;\n\n\/\/=======================================================================================\nvec4 CubicHermite (vec4 A, vec4 B, vec4 C, vec4 D, float t)\n{\n\tfloat t2 = t*t;\n    float t3 = t*t*t;\n    vec4 a = -A\/2.0 + (3.0*B)\/2.0 - (3.0*C)\/2.0 + D\/2.0;\n    vec4 b = A - (5.0*B)\/2.0 + 2.0*C - D \/ 2.0;\n    vec4 c = -A\/2.0 + C\/2.0;\n   \tvec4 d = B;\n    \n    return a*t3 + b*t2 + c*t + d;\n}\n\n\/\/============================================================\nvec4 SampleNearest (in vec2 adjustedFragCoord)\n{\n\tvec2 uv = adjustedFragCoord \/ iResolution.xy;\n    return texture2D(iChannel0, uv);\n}\n\n\/\/============================================================\nvec4 SampleBilinear (in vec2 adjustedFragCoord)\n{\n    adjustedFragCoord-= 0.5;\n    vec2 fragFract = fract(adjustedFragCoord);\n    \n    \/\/ get the four data points\n    vec2 uvMin = adjustedFragCoord \/ iResolution.xy;\n    vec2 uvMax = (adjustedFragCoord + vec2(1.0)) \/ iResolution.xy;\n    vec4 data00 = texture2D(iChannel0, uvMin);\n    vec4 data10 = texture2D(iChannel0, vec2(uvMax.x, uvMin.y));\n    vec4 data01 = texture2D(iChannel0, vec2(uvMin.x, uvMax.y));\n    vec4 data11 = texture2D(iChannel0, uvMax);\n    \n    \/\/ bilinear interpolate\n    vec4 datax0 = mix(data00, data10, fragFract.x);\n    vec4 datax1 = mix(data01, data11, fragFract.x);\n    return mix(datax0, datax1, fragFract.y);\n}\n\n\/\/============================================================\n\/\/ More info about this technique here:\n\/\/ http:\/\/iquilezles.org\/www\/articles\/texture\/texture.htm\nvec4 SampleBilinearSmoothstep (in vec2 adjustedFragCoord)\n{\n    adjustedFragCoord-= 0.5;\n    vec2 fragFract = fract(adjustedFragCoord);\n    fragFract = smoothstep(0.0, 1.0, fragFract);\n    \n    \/\/ get the four data points\n    vec2 uvMin = adjustedFragCoord \/ iResolution.xy;\n    vec2 uvMax = (adjustedFragCoord + vec2(1.0)) \/ iResolution.xy;\n    vec4 data00 = texture2D(iChannel0, uvMin);\n    vec4 data10 = texture2D(iChannel0, vec2(uvMax.x, uvMin.y));\n    vec4 data01 = texture2D(iChannel0, vec2(uvMin.x, uvMax.y));\n    vec4 data11 = texture2D(iChannel0, uvMax);\n    \n    \/\/ bilinear interpolate\n    vec4 datax0 = mix(data00, data10, fragFract.x);\n    vec4 datax1 = mix(data01, data11, fragFract.x);\n    return mix(datax0, datax1, fragFract.y);    \n}\n\n\/\/============================================================\nvec4 SampleBicubic (in vec2 adjustedFragCoord)\n{\n    adjustedFragCoord-= 0.5;    \n    vec2 fragFract = fract(adjustedFragCoord);\n    \n    \/\/ get the 16 data points\n    vec4 dataNN = texture2D(iChannel0, (adjustedFragCoord + vec2(-1.0, -1.0)) \/ iResolution.xy);\n    vec4 data0N = texture2D(iChannel0, (adjustedFragCoord + vec2( 0.0, -1.0)) \/ iResolution.xy);\n    vec4 data1N = texture2D(iChannel0, (adjustedFragCoord + vec2( 1.0, -1.0)) \/ iResolution.xy);\n    vec4 data2N = texture2D(iChannel0, (adjustedFragCoord + vec2( 2.0, -1.0)) \/ iResolution.xy);\n    \n    vec4 dataN0 = texture2D(iChannel0, (adjustedFragCoord + vec2(-1.0,  0.0)) \/ iResolution.xy);\n    vec4 data00 = texture2D(iChannel0, (adjustedFragCoord + vec2( 0.0,  0.0)) \/ iResolution.xy);\n    vec4 data10 = texture2D(iChannel0, (adjustedFragCoord + vec2( 1.0,  0.0)) \/ iResolution.xy);\n    vec4 data20 = texture2D(iChannel0, (adjustedFragCoord + vec2( 2.0,  0.0)) \/ iResolution.xy);    \n    \n    vec4 dataN1 = texture2D(iChannel0, (adjustedFragCoord + vec2(-1.0,  1.0)) \/ iResolution.xy);\n    vec4 data01 = texture2D(iChannel0, (adjustedFragCoord + vec2( 0.0,  1.0)) \/ iResolution.xy);\n    vec4 data11 = texture2D(iChannel0, (adjustedFragCoord + vec2( 1.0,  1.0)) \/ iResolution.xy);\n    vec4 data21 = texture2D(iChannel0, (adjustedFragCoord + vec2( 2.0,  1.0)) \/ iResolution.xy);     \n    \n    vec4 dataN2 = texture2D(iChannel0, (adjustedFragCoord + vec2(-1.0,  2.0)) \/ iResolution.xy);\n    vec4 data02 = texture2D(iChannel0, (adjustedFragCoord + vec2( 0.0,  2.0)) \/ iResolution.xy);\n    vec4 data12 = texture2D(iChannel0, (adjustedFragCoord + vec2( 1.0,  2.0)) \/ iResolution.xy);\n    vec4 data22 = texture2D(iChannel0, (adjustedFragCoord + vec2( 2.0,  2.0)) \/ iResolution.xy);     \n    \n    \/\/ bicubic interpolate\n    vec4 dataxN = CubicHermite(dataNN, data0N, data1N, data2N, fragFract.x);\n    vec4 datax0 = CubicHermite(dataN0, data00, data10, data20, fragFract.x);\n    vec4 datax1 = CubicHermite(dataN1, data01, data11, data21, fragFract.x);\n    vec4 datax2 = CubicHermite(dataN2, data02, data12, data22, fragFract.x);\n    return CubicHermite(dataxN, datax0, datax1, datax2, fragFract.y);\n}\n\n\/\/============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 adjustedFragCoord = (fragCoord \/ 32.0);\n    \n    int mode = int(mod(iGlobalTime, 4.0));\n    \n    if (texture2D(iChannel1, vec2(KEY_1,0.25)).x > 0.1)\n    \tmode = 0;\n    else if (texture2D(iChannel1, vec2(KEY_2,0.25)).x > 0.1)\n        mode = 1;\n    else if (texture2D(iChannel1, vec2(KEY_3,0.25)).x > 0.1)\n        mode = 2;        \n    else if (texture2D(iChannel1, vec2(KEY_4,0.25)).x > 0.1)\n        mode = 3;        \n        \n    if (mode == 0)\n    \tfragColor = SampleNearest(adjustedFragCoord);        \n    else if (mode == 1)\n        fragColor = SampleBilinear(adjustedFragCoord);\n    else if (mode == 2)\n        fragColor = SampleBilinearSmoothstep(adjustedFragCoord);        \n    else\n        fragColor = SampleBicubic(adjustedFragCoord);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":257,"channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixel = floor(fragCoord);\n    vec3 pixelColor = vec3(0.0);\n    if (mod(floor(pixel.x \/ 2.0)+floor(pixel.y\/2.0), 2.0) == 1.0)\n    {\n    \tif (mod(pixel.x+pixel.y, 2.0) == 1.0)\n        \tpixelColor = vec3(1.0,0.0,0.0);\n    \telse\n        \tpixelColor = vec3(0.0,1.0,0.0);\n    }\n    else\n    {\n    \tif (mod(pixel.x+pixel.y, 2.0) == 1.0)\n        \tpixelColor = vec3(0.0,0.0,1.0);\n    \telse\n        \tpixelColor = vec3(0.0,0.0,0.0);\n    }\n    fragColor = vec4(pixelColor, 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}}