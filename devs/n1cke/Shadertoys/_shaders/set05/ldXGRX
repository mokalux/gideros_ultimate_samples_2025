{"Shader":{"ver":"0.1","info":{"id":"ldXGRX","date":"1375316594","viewed":2205,"name":"Procedural Tech Rings","username":"weyland","description":"Based on Struss - Virus shader, uses his and iq's formulas to map the checkerboard texture and noise it up some, feel free to suggest improvements","likes":41,"published":3,"flags":0,"tags":["rings","fast","tech","skyball","struss"],"hasliked":0},"renderpass":[{"inputs":[{"id":28,"src":"\/presets\/tex15.png","ctype":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ srtuss, 2013\n\n#define PI 3.14159265358979323\n\nfloat time = iGlobalTime;\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a * sin(iGlobalTime\/25.9)) - p.y * sin(a * sin(iGlobalTime\/12.6)),\n\t\t\t\tp.x * sin(a * sin(iGlobalTime\/27.3)) + p.y * cos(a * sin(iGlobalTime\/33.4)));\n}\n\n\/\/ iq's fast 3d noise\nfloat noise3(in vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f * f * (3.0 - 2.0 * f);\n\tvec2 uv = (p.xy + vec2(37.0, 17.0 + sin(iGlobalTime\/223.4)) * p.z) + f.xy;\n\tvec2 rg = texture2D(iChannel0, (uv + 0.5 + sin(iGlobalTime\/33.2)) \/ 256.0, -100.0).yx;\n\trg += texture2D(iChannel0, (uv + sin(iGlobalTime\/21.4) + 0.5) \/ 128.0, -100.0).yx\/10.0*(2.0+sin(time\/2.0))\/2.0;\n\trg += texture2D(iChannel0, (uv  + sin(iGlobalTime\/53.2) + 0.5) \/ 200.0, -100.0).zx\/5.0*(2.0+sin(time\/1.3))\/2.0;\n\treturn mix(rg.x, rg.y, f.z);\n}\n\n\/\/ 3d fbm\nfloat fbm3(vec3 p)\n{\n\treturn noise3(p) * 0.5 + noise3(p * 2.02) * 0.25 + noise3(p * 4.01) * 0.125;\n}\n\n\/\/ animated 3d fbm\nfloat fbm3a(vec3 p)\n{\n\tvec2 t = vec2(iGlobalTime * 0.4, 0.0);\n\treturn noise3(p + t.xyy) * 0.5 + noise3(p * 2.02 - t.xyy) * 0.25 + noise3(p * 4.01 + t.yxy) * 0.125;\n}\n\n\/\/ more animated 3d fbm\nfloat fbm3a_(vec3 p)\n{\n\tvec2 t = vec2(iGlobalTime * 0.4, 0.0);\n\treturn noise3(p + t.xyy) * 0.5 + noise3(p * 2.02 - t.xyy) * 0.25 + noise3(p * 4.01 + t.yxy) * 0.125 + noise3(p * 8.03 + t.yxy) * 0.0625;\n}\n\n\/\/ background\nvec3 sky(vec3 p)\n{\n\tvec3 col;\n\tfloat v = 1.0 - abs(fbm3a(p * 4.0) * 2.0 - 1.0);\n\tfloat n = fbm3a_(p * 7.0 - 104.042);\n\tv = mix(v, pow(n, 0.3), 0.5);\n\t\n\tcol = vec3(pow(vec3(v), vec3(14.0, 9.0, 7.0))) * 0.8;\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= iResolution.x \/ iResolution.y;\n\t\n\tfloat t = time\/8.0;\n\t\n\tvec3 dir = normalize(vec3(uv, 1.1));\n\t\n\tdir.yz = rotate(dir.yz, sin(t\/35.) * 0.2 + PI * 0.5);\n\tdir.xz = rotate(dir.xz, cos(t\/13.) * 0.5);\n\tdir.xy = rotate(dir.xy, cos(t\/22.) * 0.5);\n\t\n\tvec3 col = sky(dir);\n\n\t\/\/ dramatize colors\n\tcol = pow(col, vec3(1.75)) * 2.0;\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}}