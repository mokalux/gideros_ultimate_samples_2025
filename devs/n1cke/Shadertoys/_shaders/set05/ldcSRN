{"Shader":{"ver":"0.1","info":{"id":"ldcSRN","date":"1457934703","viewed":535,"name":"Tonemap Gradient","username":"paniq","description":"illustrating how tonemapping maintains chroma under overexposure. Center: clamped, linear. Left: Filmic tonemapping. Right: Filmic Reinhard Tonemapping with a toe for nicer blacks.","likes":12,"published":3,"flags":0,"tags":["tonemapping","reinhard","filmic"],"hasliked":0},"renderpass":[{"inputs":[{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ linear white point\nconst float W = 11.2;\n\n\/\/ exposure bias for tonemapping\nconst float exp_bias = 1.6;\n\n\/\/ Toed Reinhard\n\n\/\/ T = 0: no toe, pure Reinhard\nconst float T = 0.15;\n\nfloat toed_reinhard_curve (float x) {\n    float c = pow(x, 1.0+T);\n\treturn c \/ (1.0 + c);\n}\n\nvec3 toed_reinhard(vec3 x) {\n    float w = toed_reinhard_curve(W);\n    return vec3(\n        toed_reinhard_curve(x.r),\n        toed_reinhard_curve(x.g),\n        toed_reinhard_curve(x.b)) \/ w;\n}\n\n\/\/ Filmic Reinhard\n\nconst float T2 = 0.1;\n\nfloat filmic_reinhard_curve (float x) {\n    float q = (T2*T2 + 1.0)*x*x;    \n\treturn q \/ (q + x + T2*T2);\n}\n\nvec3 filmic_reinhard(vec3 x) {\n    float w = filmic_reinhard_curve(W);\n    return vec3(\n        filmic_reinhard_curve(x.r),\n        filmic_reinhard_curve(x.g),\n        filmic_reinhard_curve(x.b)) \/ w;\n}\n\n\/\/ filmic (John Hable)\n\n\/\/ shoulder strength\nconst float A = 0.22;\n\/\/ linear strength\nconst float B = 0.3;\n\/\/ linear angle\nconst float C = 0.1;\n\/\/ toe strength\nconst float D = 0.20;\n\/\/ toe numerator\nconst float E = 0.01;\n\/\/ toe denominator\nconst float F = 0.30;\nfloat filmic_curve(float x) {\n\treturn ((x*(A*x+C*B)+D*E)\/(x*(A*x+B)+D*F))-E\/F;\n}\n\nfloat inverse_filmic_curve(float x) {\n    float q = B*(F*(C-x) - E);\n    float d = A*(F*(x - 1.0) + E);\n    return (q -sqrt(q*q - 4.0*D*F*F*x*d)) \/ (2.0*d);\n}\nvec3 filmic(vec3 x) {\n    float w = filmic_curve(W);\n    return vec3(\n        filmic_curve(x.r),\n        filmic_curve(x.g),\n        filmic_curve(x.b)) \/ w;\n}\nvec3 inverse_filmic(vec3 x) {\n    x *= filmic_curve(W);\n    return vec3(\n        inverse_filmic_curve(x.r),\n        inverse_filmic_curve(x.g),\n        inverse_filmic_curve(x.b));\n}\n\n\/\/---------------------------------------------------------------------------------\n\nfloat linear_srgb(float x) {\n    return mix(1.055*pow(x, 1.\/2.4) - 0.055, 12.92*x, step(x,0.0031308));\n}\nvec3 linear_srgb(vec3 x) {\n    return mix(1.055*pow(x, vec3(1.\/2.4)) - 0.055, 12.92*x, step(x,vec3(0.0031308)));\n}\n\nfloat srgb_linear(float x) {\n    return mix(pow((x + 0.055)\/1.055,2.4), x \/ 12.92, step(x,0.04045));\n}\nvec3 srgb_linear(vec3 x) {\n    return mix(pow((x + 0.055)\/1.055,vec3(2.4)), x \/ 12.92, step(x,vec3(0.04045)));\n}\n\n\/\/---------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\n    \/\/ exposure goes from -8 to +8\n    float S = 8.0;\n    \/\/ exposure gradient over picture\n    float exposure = exp2((uv.y - 0.5)*2.0*S);\n    \n    vec3 color;\n    color = texture2D(iChannel0, \n\t\tuv*3.0 - iGlobalTime * 0.1).rgb;\n    color = srgb_linear(color);\n    \/\/ add small bias to erase fringes\n    color += 0.001;\n    color *= exposure;\n    if (uv.x > 0.66667) {\n        \/\/color *= exp_bias;\n        color = filmic_reinhard(color);\n    } else if (uv.x < 0.33333) {\n        color *= exp_bias;\n        color = filmic(color);\n    }\n    \/\/ sRGB mixdown    \n    color = clamp(linear_srgb(color), 0.0, 1.0);\n    color *= min(1.0, abs((uv.x+0.33333*0.5)- 0.5)*400.0);\n    color *= min(1.0, abs((uv.x-0.33333*0.5)- 0.5)*400.0);\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}}