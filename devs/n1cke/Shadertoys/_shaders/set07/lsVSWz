{"Shader":{"ver":"0.1","info":{"id":"lsVSWz","date":"1463915249","viewed":258,"name":"Another Voronoi","username":"Zavie","description":"A Voronoi \/ Worley implementation, based upon the legions of experiments by IQ and Fabrice Neyret.","likes":7,"published":3,"flags":0,"tags":["voronoi","noise","worley"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/\/\n\/\/ A Voronoi implementation, featuring some of the tricks seen\n\/\/ in other shaders.\n\/\/\n\nfloat hash(float x) { return fract(sin(x) * 43758.5453); }\nfloat hash(vec2 xy) { return fract(sin(dot(xy, vec2(12.9898, 78.233))) * 43758.5453); }\nvec2 hash2(vec2 xy) { return fract(sin(vec2(dot(xy, vec2(127.1,311.7)), dot(xy, vec2(269.5,183.3)))) * 43758.5453); }\n\nstruct VoronoiInfo\n{\n    float f1;\n    float f2;\n    float id;\n    vec2 pos;\n};\n\nVoronoiInfo Voronoi(vec2 uv, float randomness, float norm)\n{\n    vec2 iuv = floor(uv);\n    float f1 = 1e30;\n    float f2 = 1e30;\n    float id = -1.;\n    vec2 pos = vec2(0.);\n\n    for (int j = -1; j <= 1; ++j)\n    for (int i = -1; i <= 1; ++i)\n    {\n        vec2 cell = iuv + vec2(float(i), float(j));\n        vec2 p = cell + mix(vec2(0.5), hash2(cell), randomness);\n        float cellId = hash(cell);\n\n        vec2 delta = abs(p - uv);\n        float d1 = delta.x + delta.y;\t\t\t\t\/\/ Manhattan\n        float d2 = length(delta);\t\t\t\t\t\/\/ Euclid\n        float dInfinite = max(delta.x, delta.y);\t\/\/ Chebychev\n\n        float d = 0.;\n        if (norm <= 1.)      d = mix(d1, d2, norm);\n        else if (norm <= 2.) d = mix(d2, dInfinite, norm - 1.);\n        else if (norm <= 3.) d = mix(dInfinite, d1, norm - 2.);\n\n        if (d < f1)\n        {\n            f2 = f1;\n            f1 = d;\n            id = cellId;\n            pos = p;\n        }\n        else if (d < f2)\n        {\n            f2 = d;\n        }\n    }\n\treturn VoronoiInfo(f1, f2, id, pos);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    float randomness = mix(0.2, 1., smoothstep(0., 1., abs(2. * fract(0.2*iGlobalTime - 0.5*uv.x) - 1.)));\n    VoronoiInfo vi = Voronoi(10.*uv, randomness, 3.*fract(0.25*iGlobalTime));\n    \n    vec3 baseColor = mix(vec3(0.19, 0.53, 0.11), vec3(0.66, 0.15, 0.2), hash(vi.id));\n    float cellDot = smoothstep(0.05, 0.1, length(10.*uv - vi.pos));\n\n    fragColor = vec4(mix(vec3(1.), baseColor, pow(vi.f2 - vi.f1, 0.2)) * cellDot, 1.0);\n}","name":"Image","description":"","type":"image"}]}}