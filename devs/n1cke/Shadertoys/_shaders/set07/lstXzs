{"Shader":{"ver":"0.1","info":{"id":"lstXzs","date":"1461083706","viewed":274,"name":"Parallel Reduction","username":"cornusammonis","description":"Counts the number of red pixels on screen using parallel reduction. Draw with the mouse to add pixels.","likes":6,"published":3,"flags":32,"tags":["reduction","histopyramid","parallel"],"hasliked":0},"renderpass":[{"inputs":[{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/*\n\tParallel Reduction\n\n\tBuffers A, B, and C count the number of red pixels in Buffer D by parallel reduction.\n\tWorks up to a resolution of 4096x4096. The default brush size, 1 pixel, can be \n    changed in Buffer D.\n*\/\n\n\n\n\/* \n\tBegin 7-seg display code by Andrew Wild\n\tSee: https:\/\/www.shadertoy.com\/view\/MdtSzs\n*\/\n\n\/\/ Created by Andrew Wild - akohdr\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define BLK vec4(.0,.0,.0,1.)\n#define WHT vec4(1.,1.,1.,1.)\n\n\/\/ tweaked 7 seg decoder originally from dr2 @ https:\/\/www.shadertoy.com\/view\/MddXRl\n#define HSEG(a,b,c) (1.-smoothstep(a,b,abs(c)))\n#define SEG(q) HSEG(.13,.17,q.x)*HSEG(.5,.57,q.y)\n#define CHK b=a\/2;if(b*2!=a)d+= \nfloat Seg7(vec2 q, int v)\n{\n  float d;\n  int a, b;\n  const vec2 vp = vec2 (.5,.5), \n             vm = vec2 (-.5,.5), \n             vo = vec2 (1,0);\n  if (v < 5) {\n    if (v == -1) a = 8;\n    else if (v == 0) a = 119;\n    else if (v == 1) a = 36;\n    else if (v == 2) a = 93;\n    else if (v == 3) a = 109;\n    else a = 46;\n  } else {\n    if (v == 5) a = 107;\n    else if (v == 6) a = 123;\n    else if (v == 7) a = 37;\n    else if (v == 8) a = 127;\n    else a = 111;\n  }\n  q = (q-.5) * vec2(1.7,2.3);\n  d = 0.; CHK SEG(vec2(q.yx - vo));\n  a = b;  CHK SEG(vec2(q.xy - vp));\n  a = b;  CHK SEG(vec2(q.xy - vm));\n  a = b;  CHK SEG(vec2(q.yx));\n  a = b;  CHK SEG(vec2(q.xy + vm));\n  a = b;  CHK SEG(vec2(q.xy + vp));\n  a = b;  CHK SEG(vec2(q.yx + vo));\n  return d;\n}\n\nint decDigit(lowp float v, int i) {\n    float f = float(i), \n          p1 = pow(10.,f-1.);\n    return int((mod(v,pow(10.,f))-mod(v,p1))\/p1);\n}\n\nvec4 drawDigits(vec2 fragCoord, float count)\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy,\n         left = vec2(-1,0),\n         home=24.*(fragCoord*vec2(-1,1))\/iResolution.xy;\n    \n    vec4 col = vec4(0);\n    \n#define DIGITS(l) for(int i=1;i<=l;i++){xy+=left;col+=vec4(Seg7(xy,decDigit(v,i) ));}\n    \n    float v = count; \n    vec2 xy = home + vec2(12.,-20);\n    DIGITS(8);\n    \n    return col;\n\n}\n\n\/* \n\tEnd 7-seg display code by Andrew Wild\n*\/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    float count = texture2D(iChannel0, vec2(0.0)).w;\n    float brush = texture2D(iChannel1, uv).x;\n    fragColor = vec4(brush, 0.0, 0.0, 0.0) + drawDigits(fragCoord, count);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":257,"channel":0}],"code":"#define STARTING_MODULUS 2\n\nbool reduceHere(int mm, vec2 c) {\n\tvec2 m = floor(mod(c, float(mm)));\n    return all(equal(m, vec2(0.0)));\n}\n\nvec4 T(sampler2D ch, vec2 uv) {\n\treturn clamp(uv, 0.0, 1.0) == uv ? texture2D(ch, uv) : vec4(0.0);   \n}\n\nconst ivec4 wi = ivec4(1, 2, 4, 8);\n\nvec4 reduce(sampler2D ch0, sampler2D ch1, int mi, vec2 c) {\n    vec4 r = vec4(0.0);\n    for (int p = 0; p < 4; p++) {\n        \/\/ this ought to be done with bitwise ops but they are not supported here\n        float m = float(wi[p] * mi\/2);\n        int n = wi[p] * mi;\n        if (reduceHere(n, c)) {\n            vec3 i = vec3(m, m, 0.0) \/ iResolution.xyy;\n            vec2 uv = c \/ iResolution.xy;\n            vec2 uv_e  = uv + i.xz;\n            vec2 uv_ne = uv + i.xy;\n            vec2 uv_n  = uv + i.zy;\n            if (p == 0) {\n                r[p] = T(ch0, uv).x + T(ch0, uv_e).x + T(ch0, uv_ne).x + T(ch0, uv_n).x;\n            } else {\n                r[p] = T(ch1, uv)[p-1] + T(ch1, uv_e)[p-1] + T(ch1, uv_ne)[p-1] + T(ch1, uv_n)[p-1];\n            }\n        } else {\n           r[p] = 0.0; \n        }\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tO = vec4(reduce(iChannel0, iChannel1, STARTING_MODULUS, U));\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":258,"channel":0}],"code":"#define STARTING_MODULUS 32\n\nbool reduceHere(int mm, vec2 c) {\n\tvec2 m = floor(mod(c, float(mm)));\n    return all(equal(m, vec2(0.0)));\n}\n\nvec4 T(sampler2D ch, vec2 uv) {\n\treturn clamp(uv, 0.0, 1.0) == uv ? texture2D(ch, uv) : vec4(0.0);   \n}\n\nconst ivec4 wi = ivec4(1, 2, 4, 8);\n\nvec4 reduce(sampler2D ch0, sampler2D ch1, int mi, vec2 c) {\n    vec4 r = vec4(0.0);\n    for (int p = 0; p < 4; p++) {\n        \/\/ this ought to be done with bitwise ops but they are not supported here\n        float m = float(wi[p] * mi\/2);\n        int n = wi[p] * mi;\n        if (reduceHere(n, c)) {\n            vec3 i = vec3(m, m, 0.0) \/ iResolution.xyy;\n            vec2 uv = c \/ iResolution.xy;\n            vec2 uv_e  = uv + i.xz;\n            vec2 uv_ne = uv + i.xy;\n            vec2 uv_n  = uv + i.zy;\n            if (p == 0) {\n                r[p] = T(ch0, uv).w + T(ch0, uv_e).w + T(ch0, uv_ne).w + T(ch0, uv_n).w;\n            } else {\n                r[p] = T(ch1, uv)[p-1] + T(ch1, uv_e)[p-1] + T(ch1, uv_ne)[p-1] + T(ch1, uv_n)[p-1];\n            }\n        } else {\n           r[p] = 0.0; \n        }\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tO = vec4(reduce(iChannel0, iChannel1, STARTING_MODULUS, U));\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":259,"channel":0}],"code":"#define STARTING_MODULUS 512\n\nbool reduceHere(int mm, vec2 c) {\n\tvec2 m = floor(mod(c, float(mm)));\n    return all(equal(m, vec2(0.0)));\n}\n\nvec4 T(sampler2D ch, vec2 uv) {\n\treturn clamp(uv, 0.0, 1.0) == uv ? texture2D(ch, uv) : vec4(0.0);   \n}\n\nconst ivec4 wi = ivec4(1, 2, 4, 8);\n\nvec4 reduce(sampler2D ch0, sampler2D ch1, int mi, vec2 c) {\n    vec4 r = vec4(0.0);\n    for (int p = 0; p < 4; p++) {\n        \/\/ this ought to be done with bitwise ops but they are not supported here\n        float m = float(wi[p] * mi\/2);\n        int n = wi[p] * mi;\n        if (reduceHere(n, c)) {\n            vec3 i = vec3(m, m, 0.0) \/ iResolution.xyy;\n            vec2 uv = c \/ iResolution.xy;\n            vec2 uv_e  = uv + i.xz;\n            vec2 uv_ne = uv + i.xy;\n            vec2 uv_n  = uv + i.zy;\n            if (p == 0) {\n                r[p] = T(ch0, uv).w + T(ch0, uv_e).w + T(ch0, uv_ne).w + T(ch0, uv_n).w;\n            } else {\n                r[p] = T(ch1, uv)[p-1] + T(ch1, uv_e)[p-1] + T(ch1, uv_ne)[p-1] + T(ch1, uv_n)[p-1];\n            }\n        } else {\n           r[p] = 0.0; \n        }\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tO = vec4(reduce(iChannel0, iChannel1, STARTING_MODULUS, U));\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":260,"channel":0}],"code":"#define BRUSH_SIZE 1.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 brush = vec4(0.0);\n    if (iMouse.z > 0.0) {\n    \tfloat d = length(floor(fragCoord.xy) - floor(iMouse.xy));\n        float m = d < BRUSH_SIZE ? 1.0 : 0.0;\n        brush += vec4(m);\n    }\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    if (iFrame < 10) {\n        fragColor = length(fragCoord.xy - iResolution.xy\/2.0) < 10.0 ? vec4(1.0) : vec4(0.0);\n    } else {\n    \tfragColor = clamp(texture2D(iChannel0, uv) + brush, 0.0, 1.0);\n    }\n}","name":"Buf D","description":"","type":"buffer"}]}}