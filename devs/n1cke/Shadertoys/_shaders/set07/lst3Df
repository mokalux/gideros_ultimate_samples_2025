{"Shader":{"ver":"0.1","info":{"id":"lst3Df","date":"1452624788","viewed":2102,"name":"lens: bokeh blur, octagon 4pass","username":"hornet","description":"4-pass bokeh (implementation of http:\/\/ivizlab.sfu.ca\/papers\/cgf2012.pdf )\nLMB to vary blursize.\nBottom test-pattern on the left shows artifacts.\nBUF-A\/BUF-B are the same as BUF-C\/BUF-D with different blur-directions.","likes":42,"published":3,"flags":32,"tags":["blur","lens","filter","bokeh","hex","octa"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"vec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\t\n    vec3 s0 = srgb2lin(texture2D( iChannel0, uv, -10.0 ).rgb);\n    vec3 s1 = srgb2lin(texture2D( iChannel1, uv, -10.0 ).rgb);\n\n    vec3 s2 = srgb2lin(texture2D( iChannel2, uv, -10.0 ).rgb);\n    vec3 s3 = srgb2lin(texture2D( iChannel3, uv, -10.0 ).rgb);\n\n    \/\/fragColor = vec4( lin2srgb(s0), 1.0 ); return; \/\/DEBUG\n    \/\/fragColor = vec4( lin2srgb(s2), 1.0 ); return; \/\/DEBUG\n    \/\/\n    \/\/fragColor = vec4( lin2srgb(s1), 1.0 ); return; \/\/DEBUG\n    \/\/fragColor = vec4( lin2srgb(s2), 1.0 ); return; \/\/DEBUG\n    \n    fragColor = vec4( lin2srgb( min( s1, s3 ) ), 1.0 ); \/\/octagon\n    \/\/fragColor = vec4( lin2srgb( max( s1, s3 ) ), 1.0 ); \/\/star\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":4,"src":"\/presets\/tex03.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":7,"src":"\/presets\/tex06.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":257,"channel":0}],"code":"const vec2 blurdir = vec2( 1.0, 0.0 );\n\nconst float blurdist_px = 64.0;\nconst int NUM_SAMPLES = 16;\n\nconst float THRESHOLD = 0.1;\nconst float MULT = 4.0;\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\n\/\/note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\nvec4 pattern( vec2 p )\n{\n    float aspect = iResolution.x\/iResolution.y;\n    float p0 = step(abs(p.x-0.125), 0.01) * step(abs(p.y-0.27), 0.01);\n    float p1 = step( length( p-vec2(0.125, 0.45) ), 0.025 );\n    \n    float p2_0 = step( length( p-vec2(0.08, 0.14) ), 0.0125 );\n    float p2_1 = step( length( p-vec2(0.16, 0.125) ), 0.0125 );\n    float p2_2 = step( length( p-vec2(0.1, 0.07) ), 0.0125 );\n    float p2 = max(p2_0, max(p2_1,p2_2));\n    \n    return vec4( max( p0, max(p1,p2) ) );\n}\n\nvec3 sampletex( vec2 uv )\n{\n    float t = fract( 0.1*iGlobalTime );\n    if ( t < 1.0\/3.0)\n    \treturn srgb2lin( texture2D( iChannel0, uv, -10.0 ).rgb );\n    else if ( t < 2.0\/3.0 )\n        return srgb2lin( texture2D( iChannel1, uv, -10.0 ).rgb );\n    else\n\t    return srgb2lin( texture2D( iChannel2, uv, -10.0 ).rgb );    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 blurvec = normalize(blurdir) \/ iResolution.xx;\n    fragCoord += 25.0 * vec2( cos(iGlobalTime), sin(iGlobalTime ) );\n    vec2 suv = fragCoord \/ iResolution.xy; \n    vec2 uv = fragCoord \/ iResolution.xx;\n    float sinblur = ( 0.55 + 0.45 * sin( 5.0 * uv.x + iGlobalTime ) );\n    float blurdist = (iMouse.z>0.5) ? 100.0 * iMouse.x\/iResolution.x : blurdist_px * sinblur;\n    \n    vec2 p0 = uv - 0.5 * blurdist * blurvec;\n    vec2 p1 = uv + 0.5 * blurdist * blurvec;\n    vec2 stepvec = (p1-p0) \/ float(NUM_SAMPLES);\n    vec2 p = p0 + (hash12n(uv+fract(iGlobalTime))-0.5) * stepvec;\n    \n    vec3 sumcol = vec3(0.0);\n    for (int i=0;i<NUM_SAMPLES;++i)\n    {\n        if ( suv.x < 0.25 )\n            sumcol += pattern( p ).rgb;\n        else\n        {\n            vec3 sample = (sampletex(p) - THRESHOLD) \/ (1.0-THRESHOLD);\n            sumcol += sample*sample; \/\/wtf\n        }\n        p += stepvec;\n    }\n    sumcol \/= float(NUM_SAMPLES);\n    sumcol = max( sumcol, 0.0 );\n    \n    fragColor = vec4( lin2srgb( sumcol * MULT ), 1.0 );\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":258,"channel":0}],"code":"const vec2 blurdir = vec2( 0.0, 1.0 );\n\nconst float blurdist_px = 64.0;\nconst int NUM_SAMPLES = 16;\n\n\n\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\n\/\/note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 blurvec = normalize(blurdir) \/ iResolution.xy;\n    vec2 uv = fragCoord \/ iResolution.xy;\n    float sinblur = ( 0.55 + 0.45 * sin( 5.0 * uv.x + iGlobalTime ) );\n    float blurdist = (iMouse.z>0.5) ? 100.0 * iMouse.x\/iResolution.x : blurdist_px * sinblur;\n    \n    vec2 p0 = uv - 0.5 * blurdist * blurvec;\n    vec2 p1 = uv + 0.5 * blurdist * blurvec;\n    vec2 stepvec = (p1-p0) \/ float(NUM_SAMPLES);\n    vec2 p = p0 + (hash12n(uv+fract(iGlobalTime))-0.5) * stepvec;\n    \n    vec3 sumcol = vec3(0.0);\n    for (int i=0;i<NUM_SAMPLES;++i)\n    {\n     \tsumcol += srgb2lin( texture2D( iChannel0, p, -10.0 ).rgb);\n        p += stepvec;\n    }\n    sumcol \/= float(NUM_SAMPLES);\n    \n    fragColor = vec4( lin2srgb(sumcol), 1.0 );\n}\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":4,"src":"\/presets\/tex03.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":7,"src":"\/presets\/tex06.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":259,"channel":0}],"code":"const vec2 blurdir = vec2( 1.0, 1.0 );\n\nconst float blurdist_px = 64.0;\nconst int NUM_SAMPLES = 16;\n\nconst float THRESHOLD = 0.1;\nconst float MULT = 4.0;\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\n\/\/note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\nvec4 pattern( vec2 p )\n{\n    float aspect = iResolution.x\/iResolution.y;\n    float p0 = step(abs(p.x-0.125), 0.01) * step(abs(p.y-0.27), 0.01);\n    float p1 = step( length( p-vec2(0.125, 0.45) ), 0.025 );\n    \n    float p2_0 = step( length( p-vec2(0.08, 0.14) ), 0.0125 );\n    float p2_1 = step( length( p-vec2(0.16, 0.125) ), 0.0125 );\n    float p2_2 = step( length( p-vec2(0.1, 0.07) ), 0.0125 );\n    float p2 = max(p2_0, max(p2_1,p2_2));\n    \n    return vec4( max( p0, max(p1,p2) ) );\n}\n\nvec3 sampletex( vec2 uv )\n{\n    float t = fract( 0.1*iGlobalTime );\n    if ( t < 1.0\/3.0)\n    \treturn srgb2lin( texture2D( iChannel0, uv, -10.0 ).rgb );\n    else if ( t < 2.0\/3.0 )\n        return srgb2lin( texture2D( iChannel1, uv, -10.0 ).rgb );\n    else\n\t    return srgb2lin( texture2D( iChannel2, uv, -10.0 ).rgb );    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 blurvec = normalize(blurdir) \/ iResolution.xx;\n    fragCoord += 25.0 * vec2( cos(iGlobalTime), sin(iGlobalTime ) );\n    vec2 suv = fragCoord \/ iResolution.xy; \n    vec2 uv = fragCoord \/ iResolution.xx;\n    float sinblur = ( 0.55 + 0.45 * sin( 5.0 * uv.x + iGlobalTime ) );\n    float blurdist = (iMouse.z>0.5) ? 100.0 * iMouse.x\/iResolution.x : blurdist_px * sinblur;\n    \n    vec2 p0 = uv - 0.5 * blurdist * blurvec;\n    vec2 p1 = uv + 0.5 * blurdist * blurvec;\n    vec2 stepvec = (p1-p0) \/ float(NUM_SAMPLES);\n    vec2 p = p0 + (hash12n(uv+fract(iGlobalTime))-0.5) * stepvec;\n    \n    vec3 sumcol = vec3(0.0);\n    for (int i=0;i<NUM_SAMPLES;++i)\n    {\n        if ( suv.x < 0.25 )\n            sumcol += pattern( p ).rgb;\n        else\n        {\n            vec3 sample = (sampletex(p) - THRESHOLD) \/ (1.0-THRESHOLD);\n            sumcol += sample*sample; \/\/wtf\n        }\n        p += stepvec;\n    }\n    sumcol \/= float(NUM_SAMPLES);\n    sumcol = max( sumcol, 0.0 );\n    \n    fragColor = vec4( lin2srgb( sumcol * MULT ), 1.0 );\n}\n","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":260,"channel":0}],"code":"const vec2 blurdir = vec2( 1.0, -1.0 );\n\nconst float blurdist_px = 64.0;\nconst int NUM_SAMPLES = 16;\n\n\n\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\n\/\/note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 blurvec = normalize(blurdir) \/ iResolution.xy;\n    vec2 uv = fragCoord \/ iResolution.xy;\n    float sinblur = ( 0.55 + 0.45 * sin( 5.0 * uv.x + iGlobalTime ) );\n    float blurdist = (iMouse.z>0.5) ? 100.0 * iMouse.x\/iResolution.x : blurdist_px * sinblur;\n    \n    vec2 p0 = uv - 0.5 * blurdist * blurvec;\n    vec2 p1 = uv + 0.5 * blurdist * blurvec;\n    vec2 stepvec = (p1-p0) \/ float(NUM_SAMPLES);\n    vec2 p = p0 + (hash12n(uv+fract(iGlobalTime))-0.5) * stepvec;\n    \n    vec3 sumcol = vec3(0.0);\n    for (int i=0;i<NUM_SAMPLES;++i)\n    {\n     \tsumcol += srgb2lin( texture2D( iChannel0, p, -10.0 ).rgb);\n        p += stepvec;\n    }\n    sumcol \/= float(NUM_SAMPLES);\n    \n    fragColor = vec4( lin2srgb(sumcol), 1.0 );\n}\n","name":"Buf D","description":"","type":"buffer"}]}}