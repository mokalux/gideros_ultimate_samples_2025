{"Shader":{"ver":"0.1","info":{"id":"lsK3zV","date":"1464104857","viewed":251,"name":"Reactive Contour Lines","username":"glk7","description":"2D perlin noise fbm contour lines. The fbm is generated with 4 octaves, each one reacts to a different frequency of the audio playing on iChannel1. ","likes":6,"published":3,"flags":64,"tags":["perlinnoise","fbm","reactive","contourlines"],"hasliked":0},"renderpass":[{"inputs":[{"id":4503,"src":"https:\/\/soundcloud.com\/official-toska\/04illumo","ctype":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Created by genis sole - 2016\n\/\/ License Creative Commons Attribution 4.0 International License.\n\nvec2 hash(in vec2 p) {\n    p = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(299.5,783.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.545);\n}\n\nfloat noise(in vec2 p) \n{\n    vec2 p00 = floor(p);\n    vec2 p10 = p00 + vec2(1.0, 0.0);\n    vec2 p01 = p00 + vec2(0.0, 1.0);\n    vec2 p11 = p00 + vec2(1.0, 1.0);\n    \n    vec2 s = p - p00;\n    \n    float a = dot(hash(p00), s);\n\tfloat b = dot(hash(p10), p - p10);\n\tfloat c = dot(hash(p01), p - p01);\n\tfloat d = dot(hash(p11), p - p11);\n\n    vec2 q = s*s*s*(s*(s*6.0 - 15.0) + 10.0);\n\n    float c0 = a;\n    float c1 = b - a;\n    float c2 = c - a;\n    float c3 = d - c - b + a;\n\n   \treturn c0 + q.x*c1 + q.y*c2 + q.x*q.y*c3;\n}\n\n\nfloat fbm(vec2 p) \n{\n\tfloat h = noise(p) * texture2D(iChannel1, vec2(0.0, 0.0)).r;\n    h += noise(p * 2.0) * texture2D(iChannel1, vec2(0.25, 0.0)).r * 0.5;\n    h += noise(p * 4.0) * texture2D(iChannel1, vec2(0.50, 0.0)).r * 0.25;\n    h += noise(p * 8.0) * texture2D(iChannel1, vec2(0.75, 0.0)).r * 0.125;\n    \n    return h;\n}\n\n\/\/ Taken from http:\/\/iquilezles.org\/www\/articles\/palettes\/palettes.htm\nvec3 ColorPalette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 ContourLines(vec2 p) \n{\n\tfloat h = fbm(p*1.5);\n    float t = h*10.0 - floor(h*10.0);\n    float b = floor(h*10.0) - (h*10.0 - 1.0);\n    return ColorPalette(h,\n                        vec3(1.0), vec3(0.7), vec3(1.0), vec3(0.0, 0.333, 0.666)) * \n               (pow(t, 16.0) + pow(b, 4.0));\n        \n}\n\nvec2 Position() {\n\treturn vec2(noise(vec2(iGlobalTime*0.14)), noise(vec2(iGlobalTime*0.12))) +\n           vec2(0.0, iGlobalTime * 0.25);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = Position() + (fragCoord \/ max(iResolution.x, iResolution.y));\n\tfragColor = vec4(pow(ContourLines(p), vec3(0.55)), 1.0);\n}","name":"Image","description":"","type":"image"}]}}