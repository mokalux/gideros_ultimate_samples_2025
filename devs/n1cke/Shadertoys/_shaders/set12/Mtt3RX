{"Shader":{"ver":"0.1","info":{"id":"Mtt3RX","date":"1470674861","viewed":307,"name":"Mooncheese","username":"ivansafrin","description":"#shaderaday #4","likes":3,"published":3,"flags":0,"tags":["cheese","asteroid","shaderaday"],"hasliked":0},"renderpass":[{"inputs":[{"id":47,"src":"\/presets\/tex19.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"id":37,"channel":0}],"code":"const float PI = 3.14159265359;\n\nvec2 sphere_map(vec3 n) {\n\treturn vec2((atan(n.z,n.x)\/(2.0 * PI)) + iGlobalTime * 0.05, acos(n.y) \/ (PI)) + vec2(0.6, 0.0);\n}\n\nfloat scene(vec3 position) {\n    vec2 uv = sphere_map(normalize(position));\n    float height = 0.3 - pow(texture2D(iChannel0, uv).x, 3.0) * 0.1;\n    return length(position)-height;\n}\n\nvec3 getNormal(vec3 ray_hit_position, float smoothness) {\t\n\tvec3 n;\n\tvec2 dn = vec2(smoothness, 0.0);\n\tn.x\t= scene(ray_hit_position + dn.xyy) - scene(ray_hit_position - dn.xyy);\n\tn.y\t= scene(ray_hit_position + dn.yxy) - scene(ray_hit_position - dn.yxy);\n\tn.z\t= scene(ray_hit_position + dn.yyx) - scene(ray_hit_position - dn.yyx);\n\treturn normalize(n);\n}\n\nfloat raymarch(vec3 position, vec3 direction) {\n    float total_distance = 0.0;\n    for(int i = 0 ; i < 32 ; ++i) {\n        float result = scene(position + direction * total_distance);\n        if(result < 0.005)\n        {\n            return total_distance;\n        }\n        total_distance += result;\n    }\n    return -1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    uv -= vec2(0.5*iResolution.x\/iResolution.y, 0.5);\n    vec3 direction = normalize(vec3(uv, 2.5));\n    vec3 origin = vec3(0.0, 0.0, -2.5);\n    float dist = raymarch(origin, direction);\n    if(dist < 0.0) {\n\t\tfragColor = vec4(0.0, sin(uv.y+1.0)*0.2, sin(uv.y+1.0)*0.3 ,1.0);\n    } else{\n        vec3 fragPosition = origin+direction*dist;\n \t\tvec3 N = getNormal(fragPosition, 0.01);\n        vec3 lightPos = vec3(1.0, 0.0, -1.0);\n \t\tfloat diffuse = dot(normalize(lightPos), N);\n\t\tdiffuse = max(0.0, diffuse); \n        vec2 uv = sphere_map(normalize(fragPosition));\n        vec4 cheeseColor = vec4(0.7, 0.8, 0.0, 1.0) - texture2D(iChannel0, uv).x * vec4(0.9, 0.55, 0.9, 1.0);\n        fragColor = (cheeseColor*diffuse)+\n            vec4(0.2, 0.0, 0.05, 1.0)+\n            pow(max(0.0,dot(normalize(-reflect(fragPosition-lightPos, N)),normalize(-fragPosition))), 80.0) ;\n    }\n}","name":"Image","description":"","type":"image"}]}}