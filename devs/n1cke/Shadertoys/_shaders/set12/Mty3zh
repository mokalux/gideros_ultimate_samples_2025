{"Shader":{"ver":"0.1","info":{"id":"Mty3zh","date":"1473074525","viewed":61,"name":"Light On Floor","username":"Imsure1200q_1UWE130","description":"A light facing to the floor of a room; The floors look like cells with nucleus, \nThe Room Is Blue.","likes":0,"published":3,"flags":0,"tags":["3d","raymarching","flashlight","cell"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"float hashRace(vec3 p)\n{\n    vec2 noise = p.xy \/ fract(sin(dot(p.xy, vec2(0.15963, 2.968))*length(cos(p))));\n    float perl = length(clamp(p, vec3(noise, 1.0), vec3(noise, 2.0))*mod(p, sqrt(p))) - 189.0;\n    vec3 newP = smoothstep(vec3(sin(iGlobalTime)),\n                           step(vec3(noise, perl), vec3(perl, noise)) - length(tan(p)),\n                           step(vec3(noise, perl), vec3(perl, noise)) - length(sqrt(p))\n                           );\n    return length(cos(sin(newP)));\n}\nfloat sdlineRoundTile(vec3 p)\n{\n    return hashRace(p - sin(atan(iGlobalTime)));\n}\nfloat trace(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    for(int i = 0; i < 24; i++)\n    {\n        vec3 p = ro+t*rd;\n        float d = sdlineRoundTile(p);\n        t += d * 0.5;\n    }\n    return t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    float t = iGlobalTime;\n    rd.xz *= mat2(-cos(t), sin(t), sin(t), cos(t));\n    rd.xy *= mat2(cos(t), -sin(t), sin(t), cos(t));\n    rd.yz *= mat2(cos(t), sin(t), -sin(t), cos(t));\n    vec3 ro = vec3(sin(t), cos(t), -3.0);\n    float x = trace(ro, rd);\n    vec3 fc = vec3(1.0\/(1.0+x*x*0.1));\n\tfragColor = vec4(fc, 1.0) + (length(fc) * 5.0) +\n        vec4(cos(uv.y + 1.814293)) + vec4(-0.025, 0.025, 0.6, 1.0) - vec4(length(ro+rd)-1.0);\n}","name":"Image","description":"","type":"image"}]}}